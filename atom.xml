<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浅抹氵记忆的小站</title>
  
  <subtitle>change and challenge</subtitle>
  <link href="http://liuhd.com/atom.xml" rel="self"/>
  
  <link href="http://liuhd.com/"/>
  <updated>2021-07-28T11:29:16.000Z</updated>
  <id>http://liuhd.com/</id>
  
  <author>
    <name>浅抹氵记忆彡</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么我要写博客</title>
    <link href="http://liuhd.com/2021/07/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E8%A6%81%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <id>http://liuhd.com/2021/07/28/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E8%A6%81%E5%86%99%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-07-28T05:30:24.280Z</published>
    <updated>2021-07-28T11:29:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>2021年7月17日，我买了域名，搭建了这个博客。</p><p>在搭博客前后我一直在思考</p><p>为什么我要搭博客？</p><p>这玩意到底有什么用？</p><p>到底值不值得我费那么大劲折腾？</p><p>下面就分享出自己的思考和见解。</p><span id="more"></span><h2 id="看博客">看博客</h2><p>说到搭博客，就必须提一下为什么要看别人的博客。</p><p>没翻墙之前，我的知识来源是知乎、微信公众号、CSDN、b站等，我在知乎上粉一些答主，去微信公众号上找一些大V。</p><p>每当有问题（各个方面，技术、学习、生活、八卦）我都会去知乎，下意识的使用“如何看待…&quot;，“如何评价…”</p><p>这样的语句去寻找我想问的问题和我想了解的八卦。我用那些“答主”、“大V”的 “经验”、“建议”去指导我的学习和生活。</p><p>用那些评价人物或事件问题下的答主们的观点和态度去和身边的人去争论那些八卦。在那个时间段，我知乎上搜索和浏览的问题大多是下面的几种：</p><p>“如何养成习惯性自律”</p><p>“有什么欲罢不能的学习方法”</p><p>“大学四年最应该做什么”</p><p>“计算机专业学生应该怎样提高‘</p><p>“如何看待XXXX（各种我感兴趣的社会事件）”</p><p>从上面看得出来，我是一个刚入大学，想要提高但没有方法的苦逼青年。简单点来说就是一个有志的迷茫少年。</p><p>在这个过程中，我确实学到了一些东西。比如计算机学生的学习路线，以及在学习过程中的方法指导。但为此付出的却更多更多。</p><p>我在知乎上粉了一些方法论的大触，黛西巫巫，柴桑…</p><p>在他们的高赞回答中，我看到了他们自述的成长经历，大一时是废物，各方面都不起眼，迷茫一段时间后幡然醒悟，变得自律和自信…最后成为成功人士…然后他们列出自己总结的条条框框的“经验”，最后辅以让人振奋的鸡汤鼓励。</p><p>彼时作为初入大学的小白大学生的我而言，看到他们的这些“干货”，如获至宝，奉为圭臬。天真的认为，只要这样，按照他们的方法去做，加上自己的坚持不懈的努力，就一定可以成功。然而当我去实践时，却抓不到重点，只有一个方向，却在细节处碰到无数问题。我把错误归结在自己身上，认为是自己的毅力不够，注意力不集中导致的。全然不去思考是不是这些“干货”是不是有问题，毕竟，拥有百万粉的答主就是这样成功的。于是我又去到知乎，去翻他们的文章和回答。企图通过对他们的文章进行抽丝剥茧，更细节的去窥探他们方法的细节。结果依旧是被那些鸡汤迷得晕头转向。再次回到了刚开始那种“我上我就行，坚持就会赢”的空想之中。</p><p>最后，毫无疑问的，我成功被洗脑，成了他们的韭菜，耗费了大量时间待在知乎上，日复一日的看着他们所谓的干货和鸡汤，给他们点赞和收藏。而自己的水平却没有丝毫提高，反而还觉得自己跟别人不一样，认为自己比别人更加有志向，付出了更多。越发自傲了起来，而且甚至产生了病态的心理，开始嫉妒起了别人。那时候，只要有人在空间和朋友圈发自己的学习动态，我就会下意识的感到厌恶，认为他们是在炫耀，是在装逼。然后把他们的动态屏蔽掉，并在心里恶狠狠的想：“你们这些人，看起来光鲜亮丽，实际上却根本没有掌握正确的方法，最终也会是一事无成” 你可能会想，这些言论好傻逼啊，但这些并非杜撰，而是真实发生在我身上的。当然，最后的结果你也能猜出来。别人在进步，而我自己一事无成，却把自己封闭起来“孤芳自赏”。</p><p>这种行为的恶果，在大一下学期彻底的体现了出来。我的Python课逃了好多，其他专业课也逃了不少，学习跟不上进度，还花钱买了不少看起来有帮助，但其实屁用没有，买来就吃灰纯浪费钱的东西。（包括但不限于各种书，小物件）。为了逃避现实的不理想还沉浸在网络小说中无法自拔，成绩自然也谈不上多优秀。</p><p>当然，不仅仅是上面说的方法论的答主，在知乎上，这种人比比皆是。我在健身，编程上遇了很多，并同样的陷了进去（比如什么猪学长，编程指北之流） 。这些人普遍的套路就是，先摆出成就，然后说自己以前的废样，而这个“废样”好巧不巧正是你的现状。用这种反差去刺激你。吸引你的注意，然后说出自己的“成长方法”，那种看起来很多干货，但其实说了跟没说一样的方法让你上钩，成为他们的韭菜，最后让你去微信公众号，推销自己的课程和经验。</p><p>然而可气的是，这些人还会受到知乎官方的保护，帮助他们去推广，帮助他们去反对那些认清真相去反对他们的人。毕竟他们这些人是知乎的“台柱子”，为知乎引来了流量。赚钱嘛，不寒掺。</p><p>不仅是知乎，其他平台亦是如此。这里贴一下耗子哥的<a href="https://coolshell.cn/articles/19464.html">如何超过大多数人</a>,这篇文章或许可以让你认识到更多（看看自己中了几条）。</p><p>当然并不是将知乎全盘否定，毕竟是中国最大的问答网站，里面还是有不少优质回答的，同时知乎也算是一个不错的讨论社区。可以和很多真正的大触去讨论问题。我翻墙和看博客写博客这些想法也都是起源于知乎。</p><p>而翻了墙之后，我习惯了用google去搜索。区别于百度，在用谷歌搜索技术问题时，很多答案都是在个人博客上的，而百度贴的却大部分是CSDN。由此我接触到许多个人博主，区别于知乎CSDN上的回答式。个人博客是记录博主们个人成长的地方，照着他们的文章一路看下去，能看到他们的成长，看到他们的迷茫，也同样可以看清他们是什么样的人*。“如果按照以前结交朋友的方式，需要互相聊天，交流观点，然后才逐渐熟悉起来，这需要一个较长的过程，而且更糟糕的是，当你遇到另一个陌生人，又要把整个过程重复一次，表达你已经对老友表达过的那番想法。可博客却做到了“<strong>一次表达，无数次阅读</strong>”，当我看到一个写了好几年的博客，看完了之后我仿佛和这个人交谈了很久，<strong>用程序员们喜欢听的话来说就是，“博客极大地增强了话语的复用性”</strong>。”*（这段是个人博主刘未鹏的话）这就是我读别人博客的理由。</p><p>虽然博客也同样有复制粘贴，生搬硬套的人，但博客的形式却更容易去忽略掉这些。现在博客逐渐式微，个人博客博主写博客大多不是为了赚钱，更多的是记录自己。这些人的名气不高，但思想深度和技术水平却不小。而且一般都比较平易近人，没有那么多条条框框，是可以深交的伙伴。</p><h2 id="写博客">写博客</h2><p>说完了为什么看博客，在说一下为什么要写博客。</p><p>这里贴一下刘未鹏的<a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/">为什么你应该（从现在开始就）写博客</a>。</p><p>我写博客的念头，大抵是在期末考试备战复习时，那时的我已学会翻墙，在复习备考时，我的思绪就会飞到云端。因为无法静下心来复习，我就会思考一些其他事情，（上面关于知乎的思考也是那时候想到的）。某天我突然想到可以自己写博客去记录自己。写下自己的所想所感。记录自己的学习过程。这是我当时的想法，后来在看到刘未鹏的文章后（上面贴的那篇）。我觉得写博客还有其他的好处。这里列举一下。分两个层级，一个是我现在受用的，另一个是我期待达成的。</p><p>先说一下我现在受用的：</p><ol><li><p>做记录</p><p>这个是我写博客的初衷，就如同大家喜欢用照片，<s>抖音</s>去记录那些难忘瞬间一样，写博客可以记录我某一段时间的情绪变化，心路历程，获得成就等等，这样，某天我打开博客时，可以看到这些，内心多少会有些触动，同时这样也有助我一段时间后去复盘自己，总结自己。</p></li><li><p>通过书写的方式去思考</p><p>很多时候，我们脑子里会想到很多有意思的点。比如对某个事件的思考，看完某本书之后的启发，灵光一闪的念头等等。这些东西你不记录下来，很容易以后会忘记。而将他们书写下来后，你会发现，原来你之前想的还会有更多新的内容。方便你去将自己的思想具象化。同时可以锻炼自己的思维能力。</p></li><li><p>以教促学</p><p>相信大家都听说过<a href="https://wiki.mbalib.com/wiki/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95">费曼学习法</a>，也见过这张学习金字塔图。</p></li></ol><img src="https://i.loli.net/2021/07/28/Xvy9saTiWKjBIQZ.jpg" style="zoom:50%;" loading="lazy"><p>简而言之，就是要想理解的更加透彻，就需要你去教给别人。这个过程是对你自己知识的完善。写技术博客时设身处地的想一想，如果我是读者，我能从你这个文章中学到你要表达的知识。这就需要作者去写的通彻。让那些不懂得人学会。这样也会更好的促进自己去理解</p><p>下面是我期待达成的：</p><ol><li><p>认识到更多志同道合的朋友</p><p>前面说了，博客是记录自己的地方，这更像是你给互联网这个虚拟世界的一张名片，不必去面对面交流  ，仅仅是读他的博客，就能知道他是什么样的人。这种方式下，你们不必再现实中相互认识，相互熟知就能成为要好的朋友。简单且高效。</p></li><li><p>激励自己去学习</p><p>日常情况下，一个人的意志力是有限的，枯燥无谓的学习消耗的就是你的意志力，一旦意志力消耗完。剩下的就是苦苦的去和欲望争斗了，你的心就会往别处跑，无法集中精力去干自己想做的事情。写博客会给你这种激励，它会让你觉得学习这件事有意义，你的博客可能会有人看，收录到百度，谷歌上就会有人通过搜索引擎找到你。总会有一些人会认识到你，主动去接触你。让你认识到自己的价值。这些会补充你的意志力，让你更有干劲。激励你去学习</p></li><li><p>作为一份个人简历</p><p>这里有在简历上留下亮点的意思，一个厉害的博客无疑会增加你在面试官心中的价值。同样，这份简历也可以是对别人的，博客时别人了解你窗口。让别人认识到你。你交到的朋友越牛，你也会变得越牛！</p><p>​</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;2021年7月17日，我买了域名，搭建了这个博客。&lt;/p&gt;
&lt;p&gt;在搭博客前后我一直在思考&lt;/p&gt;
&lt;p&gt;为什么我要搭博客？&lt;/p&gt;
&lt;p&gt;这玩意到底有什么用？&lt;/p&gt;
&lt;p&gt;到底值不值得我费那么大劲折腾？&lt;/p&gt;
&lt;p&gt;下面就分享出自己的思考和见解。&lt;/p&gt;</summary>
    
    
    
    <category term="生活思考" scheme="http://liuhd.com/categories/%E7%94%9F%E6%B4%BB%E6%80%9D%E8%80%83/"/>
    
    
    <category term="思考" scheme="http://liuhd.com/tags/%E6%80%9D%E8%80%83/"/>
    
    <category term="生活" scheme="http://liuhd.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="http://liuhd.com/2021/07/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liuhd.com/2021/07/21/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-21T03:15:48.028Z</published>
    <updated>2021-07-22T03:13:24.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>这是我第一次发博客的学习文章，这个文章是我在学习git时做的笔记，为了弄懂我配了大量的图片，看完之后应该对git，github，版本控制都有一定的了解。当然这不是所谓的技术文章（事实上我现在也没能力去写技术文章），仅仅是把我的学习记录下来。文章是参考廖雪峰老师的git教程，和尚硅谷的git视频来写的。大家如果要学习的话建议去看看。</p><span id="more"></span><h2 id="git简介">git简介</h2><h3 id="版本控制">版本控制</h3><blockquote><p>什么是版本控制系统？</p><p>如果你用Microsoft Word写过长篇大论，那你一定有这样的经历：</p><p>想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去，最后你的Word文档变成了这样：</p><img src="https://i.loli.net/2021/07/21/pRkcDQsnYG82bv5.jpg" loading="lazy"><p>过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找，真麻烦。</p><p>看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删，真郁闷。</p><p>更要命的是，有些部分需要你的财务同事帮助填写，于是你把文件Copy到U盘里给她（也可能通过Email发送一份给她），然后，你继续修改Word文件。一天后，同事再把Word文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，得把你的改动和她的部分合并，真困难。</p><p>于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？</p><p>这个软件用起来就应该像这个样子，能记录每次文件的改动：</p><table><thead><tr><th style="text-align:left">版本</th><th style="text-align:left">文件名</th><th style="text-align:left">用户</th><th style="text-align:left">说明</th><th style="text-align:left">日期</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">service.doc</td><td style="text-align:left">张三</td><td style="text-align:left">删除了软件服务条款5</td><td style="text-align:left">7/12 10:38</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">service.doc</td><td style="text-align:left">张三</td><td style="text-align:left">增加了License人数限制</td><td style="text-align:left">7/12 18:09</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">service.doc</td><td style="text-align:left">李四</td><td style="text-align:left">财务部门调整了合同金额</td><td style="text-align:left">7/13 9:51</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">service.doc</td><td style="text-align:left">张三</td><td style="text-align:left">延长了免费升级周期</td><td style="text-align:left">7/14 15:17</td></tr></tbody></table><p>这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪</p></blockquote><h3 id="git概述">git概述</h3><p>git就是一个典型的版本控制工具。</p><p>它具有以下的作用：</p><ol><li>协同修改<ul><li>实现多人并行不悖的修改服务器端的同一个文件。</li></ul></li><li>数据备份<ul><li>git不仅能够保存目录和文件的当前状态，还能够保存每一个提交后的历史状态。</li></ul></li><li>版本管理<ul><li>git采用文件系统快照的形式，实现在保存每一个版本的文件信息时不保留重复数据，可以节约存储空间，提高运行效率。</li></ul></li><li>权限控制<ul><li>对团队中的开发人员进行权限控制。</li><li>对团队外开发者贡献的代码进行审核。</li></ul></li><li>历史记录<ul><li>查看修改人，修改时间，修改内容，日志信息</li><li>将本地文件恢复到某一个历史状态。</li></ul></li><li>分支管理<ul><li>允许开发团队在工作过程中多条生产线同时推进任务，进一步提高效率。</li></ul></li></ol><h3 id="git优势">git优势</h3><ul><li>大部分操作都在本地完成，无需联网</li><li>能够保证版本信息的完整性（哈希操作）</li><li>尽可能的添加数据而不是删除或者修改（契合版本控制）</li><li>分支操作快捷流畅</li><li>与linux系统全面兼容</li></ul><h3 id="git安装">git安装</h3><p>具体的安装教程可以参考<a href="https://git-scm.com/doc">git官方文档</a>，有问题就去谷歌搜索一下（有困难找谷歌（斜眼笑））</p><h3 id="git结构">git结构</h3><img src="https://i.loli.net/2021/07/21/dFVSowqgktvM7OT.png" loading="lazy"><h3 id="git和代码托管中心">git和代码托管中心</h3><p>作用：用来维护远程库</p><ul><li>局域网环境下<ul><li>Gitlab服务器</li></ul></li><li>外网环境下<ul><li>GitHub</li><li>码云</li></ul></li></ul><h3 id="本地库和远程库">本地库和远程库</h3><p><strong>团队协作</strong></p><p>、<img src="/.com//zEM17gv2xkDRHAJ.png" loading="lazy"></p><p>**工作原理：**项目创建人将自己的本地库<code>push</code>到代码托管中心（远程库），任何人（有权限访问）可以将远程库<code>clone</code>到自己的本地库中，然后进行操作，但个人的修改不能直接上传到远程库，需要加入团队。然后将自己修改后的本地库<code>push</code>到远程库（由于使用git，会保留所有版本的记录），然后小组的其他成员将远程库<code>pull</code>回自己的本地库。从而实现团队之间的协同开发。</p><p><strong>跨团队协作</strong></p><img src="https://i.loli.net/2021/07/21/N29w6ZXtY3aPkSm.png" loading="lazy"><p>**工作原理：**对于团队外的成员，如果也想去参与团队的开发，可以<code>fork</code>该团队的远程库，将这个远程库传到自己的远程库中，再通过<code>clone</code>将远程库下载到本地库中，然后进行开发，再通过<code>push</code>将自己本地库<code>push</code>到自己的远程库中。然后向项目开发团队发送一个<code>push resquet</code>经由开发团队审核后可以传向开发团队的远程库，然后开发团队中的成员再<code>pull</code>到自己的本地库。</p><h2 id="git的命令行操作">git的命令行操作</h2><h3 id="本地库操作">本地库操作</h3><h4 id="本地库的初始化">本地库的初始化</h4><ul><li>命令：git init</li><li>操作：在Windows上任何一个窗口打开右键，选择Git Bash Here，即可打开命令行，使用git操作，也可使用linux操作。(<a href="https://app.yinxiang.com/shard/s22/nl/31392663/d8e60561-26ee-4794-b145-16428507c8e2">常见的linux命令</a>)找到文件后输入命令git init 对创建的文件进行初始化（效果就是创造一个.git的目录）</li><li><img src="https://i.loli.net/2021/07/21/9Ji6EPIuyA7dRfO.png" loading="lazy"></li><li>注意：.git目录中存放的是本地库相关的子目录和文件，不要删除，也不要随意的修改。</li></ul><h4 id="设置签名">设置签名</h4><ul><li><p>形式</p><p>用户名：tom</p><p>Email地址：goodmoring@tom.com作用：标识不同开发人员的身份</p><p>辨析：这里设置的签名和远程库登录账号没有任何关系</p><ul><li>作用：标识不同开发人员的身份</li><li>辨析：这里设置的签名和远程库登录账号没有任何关系</li><li>命令<ul><li>项目级别/仓库级别：尽在当前本地库范围内有效<ul><li>git config <a href="http://user.name">user.name</a> tom_pro</li><li>git config user.email <a href="mailto:goodMoring_pro@tom.com">goodMoring_pro@tom.com</a></li><li><img src="https://i.loli.net/2021/07/21/RaTXGsDwzqr92FP.png" loading="lazy"></li></ul></li><li>系统用户级别：登陆当前操作系统的用户范围（整个电脑）<ul><li>git config --global <a href="http://user.name">user.name</a> tom_glb</li><li>git config --global  user.email <a href="mailto:goodMoring_pro@tom.com">goodMoring_pro@tom.com</a></li><li>信息保存位置：.git/config文件</li><li><img src="https://i.loli.net/2021/07/21/ZdlJY7AbyRKjhNa.png" loading="lazy"></li></ul></li><li>级别优先级<ul><li>就近原则：项目级别优先与系统用户级别，二者都有时采用项目级别的签名</li><li>如果只有系统用户级别的签名，就以系统用户级别的签名为准</li><li>二者都没有不允许</li></ul></li></ul></li></ul></li></ul><h4 id="添加提交以及查看状态操作">添加提交以及查看状态操作</h4><h5 id="状态查看（查看暂存区的状态）"><strong>状态查看</strong>（查看暂存区的状态）</h5><p><strong>命令</strong> : <code>git status</code></p><p><strong>效果</strong>：</p><p>在git gash 中输入命令<code>git status</code>按下回车，执行效果如下</p><img src="https://i.loli.net/2021/07/21/CWzRGrIwtxhc9LM.jpg" loading="lazy"><p>使用vim 编辑器来创建一个good.txt)<img src="/.com//CWzRGrIwtxhc9LM.jpg" loading="lazy"></p><p>再次查看状态，显示有文件但未追踪，（鲜明的红色）</p><img src="/.com//eoA6Uzvf9LlWHbG.jpg" loading="lazy"><img src="https://i.loli.net/2021/07/21/1B7wsDg3WnxvSjQ.png" loading="lazy"><h5 id="提交到暂存区"><strong>提交到暂存区</strong></h5><p><strong>命令</strong>：<code>git add</code></p><p>使用git add命令将good.txt文件提交到暂存区</p><img src="/.com//eoA6Uzvf9LlWHbG.jpg" loading="lazy"><img src="https://i.loli.net/2021/07/21/1B7wsDg3WnxvSjQ.png" loading="lazy"><p>再次查看状态：</p><img src="/.com//gV1baJn6dUs75up.jpg" loading="lazy"><img src="https://i.loli.net/2021/07/21/yuBgsT2iZDO4UvS.png" loading="lazy"><p>提示 已经将文件提交到了暂存区（一抹舒服的绿色），同时提示可以用<code>git rm --cached &lt;file&gt;</code>这个命令将文件从暂存区中移除，效果如下</p><img src="https://i.loli.net/2021/07/21/GSzrAXw82yq3tWV.png" loading="lazy"><p>再次查看状态可以发现又回到了原来未追踪的状态、（即将暂存区的文件删除）</p><h5 id="提交到本地库"><strong>提交到本地库</strong></h5><p><strong>命令：</strong><code>git commit</code></p><p><strong>效果：</strong><img src="https://i.loli.net/2021/07/21/IP2bVGdAeDTBfFY.png" loading="lazy"></p><p>git提醒你去为你的这次提交输入信息（输入信息的注释）</p><p>使用vim编辑器输入要提交的注释</p><p><strong>效果：</strong><img src="/.com//CkGYiIm5ndqJrBV.png" loading="lazy"></p><p>在第四行是根提交（<code>root commit</code>）后面是你输入的信息</p><p>第五行显示的是文件的状态，一个文件被修改，三行的内容变化</p><p>再次输入<code>git status</code>，出现<img src="/.com//se2dzVvgK6NADJu.png" loading="lazy"></p><p>第三行的<code>nothing to commit</code>表示在暂存区中没有可以提交的文件而<code>working tree clean</code>字面意思，工作树是干净的，也是没有东西可提交的意思</p><p>使用vim编辑器对提交到本地库中的文件进行修改，加上一行的u</p><p>用<code>git status</code>查看状态</p><p><strong>效果：</strong><img src="/.com//dqD2Vyv4ONPxAFK.png" loading="lazy"></p><p>可以看到git已经检测到你的修改<code>modified</code>，git同样提示可以使用<code>git add</code> 命令去<code>update</code>（<strong>这里注意这个命令和没有提交时的名利有一点不同，之前是<code>track</code>，现在是<code>update</code>，一个是在未提交时追踪，一个是提交后更新</strong>（<strong><code>注意这里的提交是到暂存区而不是本地库</code></strong>））</p><p>git同时还提示可以使用<code>git restore</code>去重置回原来的版本</p><p>最后一行的<code>and/or</code>表示可以使用git add 先将文件提交到暂存区，然后<code>git commit</code>提交到本地库，或者使用<code>git commit -a </code>直接将其提交到本地库</p><p><strong>注</strong>：在提交文件到本地库的操作中 (<code>git commit</code>)，可以使用<code>git commit -m</code>命令直接在后面输入注释内容，无需再进入vim编辑器</p><p><strong>效果：</strong><img src="/.com//ONLEyrKIW69C8Rx.png" loading="lazy"></p><p>第二行由根目录变成了一个其他目录</p><p>第三行表示状态：有一行的内容被修改，一个文件有改变</p><h5 id="img-src-Git学习笔记-Mv5nDXeAmoWjxY4-png"><img src="/.com//Mv5nDXeAmoWjxY4.png" loading="lazy"></h5><h4 id="版本的前级和后退">版本的前级和后退</h4><p>版本的前进和后退是git实现项目管理的最重要的操作。</p><p>原理：git进行版本控制的原理主要是通过HEAD头指针的移动来实现的</p><h5 id="版本记录的查看"><strong>版本记录的查看</strong></h5><p><strong>命令</strong>：<code>git log</code></p><p><strong>效果：</strong><img src="/.com//SXY8lRx2FEWJgrs.png" loading="lazy"></p><p>可以从效果中看到提交的索引（commit 后面的一大串）和一个HEAD指针指向的分支（master）</p><p>还有就是作者，提交日期，以及提交时的注释。</p><h5 id="其他查看方法"><strong>其他查看方法</strong></h5><p><strong>命令</strong>：<code>git log -- pretty=one</code></p><p><strong>效果：</strong></p><img src="https://i.loli.net/2021/07/21/DiLdgzM3Hl4vEcA.png" loading="lazy"><p>将每次的信息缩减值一行</p><p><strong>命令:</strong><code>git log --oneline</code> (注意只能看见当前版本前的版本，无法回到以后的版本)</p><p><strong>效果：</strong><img src="/.com//DiLdgzM3Hl4vEcA.png" loading="lazy"></p><p>将索引的哈希链缩的更短、</p><p><strong>命令：</strong><code>git reflog</code>（最常用）</p><p><strong>效果：</strong><img src="https://i.loli.net/2021/07/21/ZcMvJHmGRLDrsK5.png" loading="lazy"><br><img src="/.com//y5lekuNOVRYQ1Ho.png" loading="lazy"></p><p>在oneline基础上显示移动至当前版本所需的步数</p><p>HEAD@{移动到当前版本所需的步数}</p><h5 id="版本的前进和后退的操作"><strong>版本的前进和后退的操作</strong></h5><h6 id="基于索引值操作"><strong>基于索引值操作</strong></h6><p><strong>命令：</strong><code>git reset --hard &lt;index&gt;</code></p><p><strong>效果：</strong><img src="/.com//CWeyXcMbuVLdGp7.png" loading="lazy"></p><p>在使用<code>git reflog</code>查看</p><p>!<img src="/.com//HBYbqzRpka9DnP1.png" loading="lazy"></p><p>可以看到指针已经指向了要索引的地址，即实现了版本的前进和后退操作</p><p>**注：**在输入索引值时，只要选中就进行了复制，可以直接粘贴下来</p><h6 id="使用-符号"><strong>使用<code>^</code>符号</strong></h6><p><strong>特点</strong>：只能后退</p><p>可以使用<code>git log --onelline</code>更加有效</p><img src="https://i.loli.net/2021/07/21/VCD68HgmhJe15Sx.png" loading="lazy"><p><strong>命令</strong>：<code>git reset --hard HEAD ^</code>注意一个<code>^</code>表示后退一个版本</p><img src="https://i.loli.net/2021/07/21/18ATYfpzLW2NaxX.png" loading="lazy"><h6 id="使用-符号-false2"><strong>使用<code>~</code>符号</strong></h6><p><strong>特点</strong>，同样只能用来回退</p><p>用法是将<code>^</code>符号的个数变成<code>~ &lt;number&gt;</code></p><p><strong>命令</strong>：<code>git reset --hard HEEAD ~n</code></p><h6 id="hard，soft，和mixed参数的区分"><strong>hard，soft，和mixed参数的区分</strong></h6><p>hard soft和mixed都是git reset命令的参数</p><p>首先介绍一个git命令：<code>git help</code>这是一个帮助命令，在后面可以输入操作命令去查看命令参数的描述，这个文档是在安装git时就内置在安装包里面的，使用 git help命令可以直接打开相应的文档查看、</p><p><strong>–soft</strong></p><p>文档描述</p><blockquote><p>Does not touch the <strong>index file</strong> or the <strong>working tree</strong> at all (but resets the head to <code>&lt;commit&gt;</code>, just like all modes do). This leaves all your changed files “Changes to be committed”, as <code>git status</code> would put it.</p></blockquote><p>看文档可以知道 <code>--soft</code> 参数不会去改变工作区和暂存区的内容，他改变的仅仅是本地库中的内容，下面来实际操作一下。</p><p>首先看一下没使用reset之前本地库的内容</p><img src="https://i.loli.net/2021/07/21/qT7wctH4bdYkeVL.png" loading="lazy"><p>然后看一下工作区的内容</p><img src="https://i.loli.net/2021/07/21/kdQBiq1rHVWCcDE.png" loading="lazy"><p>可以看到这里工作区和本地库的内容是一一对应的</p><p>然后我们使用<code>--soft</code>参数将本地库的内容索引到另一个版本</p><img src="https://i.loli.net/2021/07/21/7FHpzUADVGRQcoh.png" loading="lazy"><p>在使用<code>git reflog</code>查看本地库中的内容</p><img src="/.com//kdQBiq1rHVWCcDE.png" loading="lazy"><img src="https://i.loli.net/2021/07/21/2dei1zP9TgmVkMn.png" loading="lazy"><p>查看工作区</p><img src="https://i.loli.net/2021/07/21/kdQBiq1rHVWCcDE.png" loading="lazy"><p>可以看到本地库的指针已经发生变化，但工作区的内容仍未改变</p><p>用<code>git status</code>查看一下暂存区的状态</p><img src="https://i.loli.net/2021/07/21/yuBgsT2iZDO4UvS.png" loading="lazy"><p>看到的是绿色的内容，说明工作区和暂存区的内容是保持一致的</p><p>这里留个问题：为什么在改变本地库后，原来已经提交后的暂存区却能被<code>git status</code>找出来而且判断已经被修改了呢？</p><p><strong>–mixed</strong></p><p>文档描述</p><blockquote><p><strong>Resets the index but not the working tree</strong> (i.e., the changed files are preserved but not marked for commit) and reports what has not been updated. This is the default action.</p></blockquote><blockquote><p>If <code>-N</code> is specified, removed paths are marked as intent-to-add (see <a href="git-add.html">git-add(1)</a>).</p></blockquote><p>可以看到<code>--mixed</code>参数改变的是本地库和暂存区的内容，但并没有改变工作区的内容，下面进行实操</p><img src="https://i.loli.net/2021/07/21/yuBgsT2iZDO4UvS.png" loading="lazy"><img src="/.com//qT7wctH4bdYkeVL.png" loading="lazy"><img src="https://i.loli.net/2021/07/21/kdQBiq1rHVWCcDE.png" loading="lazy"><p>在没有使用<code>git reset</code>时，一切还是保持老样子，工作区，暂存区和本地库是保持一致的</p><p>然后使用<code>--mixed</code>参数进行操作</p><img src="https://i.loli.net/2021/07/21/qFBDAfEWnYp7mjy.png" loading="lazy"><p>查看一下暂存区的状态</p><img src="https://i.loli.net/2021/07/21/LP71ASlvkgfzRhO.png" loading="lazy"><p>这里出现了红色的字，表示的是暂存区和工作区没有保持一致，也就是说，暂存区和本地库都改变了，但工作区没有变化、</p><p><strong>–hard</strong></p><p>文档描述</p><blockquote><p><strong>Resets the index and working tree.</strong> Any changes to tracked files in the working tree since <code>&lt;commit&gt;</code> are discarded.</p></blockquote><p>可以看出<code>--hard</code>参数是把三者都重置到了要重置的版本上、这个参数是十分快捷的，要想回退或前进版本，直接就可以使用这个参数，一步到位，不需要考虑暂存区，工作区是否也跟着前进和后退了，所以hard参数是最方便也是最常用的。</p><h6 id="删除文件的找回"><strong>删除文件的找回</strong></h6><p>在使用git时，如果不小心将文件从工作区删除了，也是可以用git找回的，但是有一个前提条件，就是必须把文件的操作信息存到本地库中去，也就是说，你在删除前使用<code>git add</code> 和 <code>git commit</code>将文件提交到了本地库。这样你就可以用版本回退的方式找回自己的文件。</p><p>因为内容和前面的回退操作比较相同，这里就不实际操作了，（主要是怕麻烦   斜眼笑.jpg）</p><p>但是可以看<a href="https://www.bilibili.com/video/BV1pW411A7a5?p=20">这个视频</a>，上面有详细的操作</p><h6 id="比较文件的差异"><strong>比较文件的差异</strong></h6><p>git是可以去比较不同版本之间文件的差异的，具体的命令是<code>git diff</code>，下面我就来实际操作一下。</p><p>首先，创建一个新的文档，提交到本地库</p><img src="https://i.loli.net/2021/07/21/4ohFcZSrasPYMGB.png" loading="lazy"><p>然后对该文档进行修改</p><img src="https://i.loli.net/2021/07/21/tIPdaRXpuG1zqFM.png" loading="lazy"><p>我修改了apple.txt文档，在第三行上加入了@@@@@</p><p>下面使用<code>git diff</code>命令去比较文档</p><img src="https://i.loli.net/2021/07/21/ZYnI7RkqzaDA9C8.png" loading="lazy"><p>可以看到使用<code>git diff</code>命令后，文档和<strong>暂存区</strong>的文档进行了比较，比较出了第三行少了一行apple ，但多了一行apple@@@@@。</p><p>红色的前面带的是<code>-</code>号，表示的是原文档与要比较的文档之间少的内容。</p><p>绿色的前面带的是<code>+</code>号，表示的是原文档与要比较的文档之间多的内容。</p><p>如果使用<code>git add</code>将文件提交到的暂存区，在使用<code>git diff</code>进行比较，是无法比较出差异的，这就说明了<code>git diff</code>这个命令在未加参数时表示的是与暂存区的比较</p><p><code>git diff</code>命令也可以和本地库的历史版本进行比较，这个后面需要加上HEAD的参数，表示与本地库中HEAD指针指向的版本之间进行比较。</p><img src="https://i.loli.net/2021/07/21/KPOIydciA893fW4.png" loading="lazy"><h4 id="git的分支">git的分支</h4><h6 id="为什么git会有分支"><strong>为什么git会有分支</strong></h6><p>在版本控制的过程中，会有多个项目同时推进的情况，这时候就要用到分支。</p><p>所以分支就是<strong>在版本控制中，使用多条线同时推进多个任务</strong>，下面用一个图来说明：</p><img src="https://i.loli.net/2021/07/21/jrfve4oM9qUOwgi.png" loading="lazy"><p>假设我们要开发一个项目，并且使用git作为我们版本控制的工具，开始我们会有一个master主干，我们的第一代项目在这个主干上。有了一代产品，我们就想在产品上多加一些新的功能。我们准备为我们的产品开发一个主题，于是我们就多了一条线，命名为feature_blue表示我们想去开发一个blue主题。然后我们将我们的主干上的版本拉到我们这条分支上，就是将master的版本复制到feature_blue上，这时两条线是互不干扰的，可以同时再进行开发，在blue线上，我们是基于主干上的一代进行开发的，在开发完成之后（开发过程中支线上可以有多个版本），在去把支线上的版本与主线上的版本进行合并。这样我们就基于一代的产品上开发出了带有blue主题的二代版本。同样的方法，我们可以再开一条线，为我们的版本开发出一个小游戏feature_game。</p><p>同时，分支对版本的修复与维护也十分方便。假设我们的产品现在出了个bug，我们可以开一条线hot_fix去修复bug，我们把master的内容拉到hot_fix上，然后在hot_fix上去进行修复，再将修复好的版本合并到master上，这样可以保证在主线项目正常运行的基础上去对其进行修复。</p><h6 id="分支的好处"><strong>分支的好处</strong></h6><ul><li>分支可以同时并行推进多个功能的开发，提高开发效率。</li><li>各个分支在开发过程中，如果一个分支开发失败，不会对其他分支有任何影响，失败的分支删除重新开始即可。</li></ul><h6 id="分支的实际操作"><strong>分支的实际操作</strong></h6><h6 id="分支的创建查看及转换"><strong>分支的创建查看及转换</strong></h6><p>首先用<code>git status</code>看一下</p><img src="https://i.loli.net/2021/07/21/hw82cimjJ6z9Vsf.png" loading="lazy"><p>可以看到git在刚创建是就会有一个主干分支master，而且现在就在这个master分支上，</p><p>我们可以使用<code>git branch -v</code>去查看在这个项目上所有的分支</p><p>使用<code>git branch </code>去创建一个新的分支hot_fix（<strong>注意创建好一个分支就已经把master分支上的项目复制过来了</strong>）</p><p>使用<code>git checkout </code>去转换分支</p><img src="https://i.loli.net/2021/07/21/NCzRFt6Kvb8Xx3G.png" loading="lazy"><img src="https://i.loli.net/2021/07/21/HXdV51PQBqLv8rF.png" loading="lazy"><h6 id="分支的合并"><strong>分支的合并</strong></h6><p>我们对hot_fix分支上的apple.txt文件进行了修改，在通过<code>git add </code> <code>git commit</code>把它提交到了本地库</p><p>这样hot_fix相对于master就快了一步，我们将hot_fix合并到master上。</p><ul><li>第一步：切换到接受修改的分支（被合并，要增加新内容）上<ul><li><code>git checkout</code>[被合并分支名]</li></ul></li><li>执行<code>merge</code>命令<ul><li><code>git merge</code>[有新内容的分支名]</li></ul></li></ul><img src="https://i.loli.net/2021/07/21/vRStxVhM2gXUI68.png" loading="lazy"><h6 id="冲突的解决"><strong>冲突的解决</strong></h6><p><strong>为什么会产生冲突</strong></p><p>分支在合并时，如果去合并的分支比被合并的分支进度快，而且前面的版本是相同的（相同文件的相同位置，并且内容一致），那么分支合并就是直接合并的（将要合并的版本合并到被合并的版本上，都变成了要合并的那个版本），但是如果合并之前的版本是不同（相同文件的相同位置，内容不一致）的，那么就会产生冲突，因为git无法判断哪一个版本要留下，这时git会发出提醒，让开发者去决定。</p><p>下面来实操一下</p><p>现在我们有两个分支，master和hot_fix，每个分支都用两个文件good.txt和apple.txt，我们使用vim编辑器去改变good.txt的内容，让他们中的同一行出现不同的输入。然后对他们进行merge合并</p><img src="https://i.loli.net/2021/07/21/Mb73cLICRAVTtKF.png" loading="lazy"><p>git提示自动合并失败，需要进行手动合并，并且最右边的（merge）变成了（master|MERGEING）</p><p>这时使用vim编辑器打开good.txt</p><img src="https://i.loli.net/2021/07/21/cNwi51YAnSC2Rto.png" loading="lazy"><p>发现good.txt里面多了几行，其中上面的</p><p>&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p><p>bbbbbb edit by masteri</p><p>== == ==</p><p>表示的是要合并的分支（master）的冲突的内容</p><p>下面的表示的是去合并的分支（hot_fix）的从图的内容</p><p>这时可以再vim编辑器中直接去修改，最后得到最终版本即可</p><p>修改完成后用`git status查看一下状态</p><img src="https://i.loli.net/2021/07/21/FAWKYsL4UuTH9Vc.png" loading="lazy"><p>这时表示暂存区和工作区的文件不同，</p><p>可以用<code>git add</code> <code>git commit</code>去提交到本地库，<strong>注意在用<code>git commit</code>操作时后面不要跟文件名，否则会出现错误</strong></p><h4 id="git基本原理">git基本原理</h4><p>在介绍git的基本原理之前，先了解一个概念：<strong>哈希</strong></p><h6 id="哈希是什么呢"><strong>哈希是什么呢?</strong></h6><p>先看一下维基百科的定义</p><blockquote><p><strong>散列函数</strong>（英语：Hash function）又称<strong>散列算法</strong>、<strong>哈希函数</strong>，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0">函数</a>将数据打乱混合，重新创建一个叫做<strong>散列值</strong>（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用一个短的随机字母和数字组成的字符串来代表。</p></blockquote><p>从上面的定义我们知道，哈希是通过一系列复杂的计算，将任何一种数据通过算法的计算输出成一种固定格式的数据。它具有以下特点：</p><img src="https://i.loli.net/2021/07/21/6m7VxeYzHTDAwvZ.png" loading="lazy"><p>因为这些特点，哈希具有很多用途。</p><p>最常用的是确保传输数据的准确性，如果数据在传输过程中出现了一点错误，那么使用同一种哈希算法的结果就会天差地别。因此可以通过哈希算法可以检验在数据传输过程中是否被篡改。</p><h6 id="git的数据存储机制"><strong>git的数据存储机制</strong></h6><img src="https://i.loli.net/2021/07/21/l5KyfAh6Dnge81W.png" loading="lazy"><h6 id="git的分支管理"><strong>git的分支管理</strong></h6><h4 id="远程库的操作">远程库的操作</h4><p>git远程库的操作主要是git和代码托管中心GitHub共同运行的。</p><p>所以我们要了解GitHub的相关操作。</p><h5 id="GitHub的注册"><strong>GitHub的注册</strong></h5><p>可以参见具体的<a href="https://docs.github.com/cn/github/getting-started-with-github/signing-up-for-github/signing-up-for-a-new-github-account">官方文档</a>  不过我相信这点肯定难不倒大家。</p><h5 id="GitHub的使用"><strong>GitHub的使用</strong></h5><p>我们先来回顾一下git协同开发的流程</p><blockquote><img src="/.com//image-20210711151558855.png" alt="image-20210711151558855" style="zoom: 25%;" loading="lazy"><p>**工作原理：**项目创建人将自己的本地库<code>push</code>到代码托管中心（远程库），任何人（有权限访问）可以将远程库<code>clone</code>到自己的本地库中，然后进行操作，但个人的修改不能直接上传到远程库，需要加入团队。然后将自己修改后的本地库<code>push</code>到远程库（由于使用git，会保留所有版本的记录），然后小组的其他成员将远程库<code>pull</code>回自己的本地库。从而实现团队之间的协同开发。</p><img src="/.com//image-20210711151842504.png" alt="image-20210711151842504" style="zoom:25%;" loading="lazy"><p>**工作原理：**对于团队外的成员，如果也想去参与团队的开发，可以<code>fork</code>该团队的远程库，将这个远程库传到自己的远程库中，再通过<code>clone</code>将远程库下载到本地库中，然后进行开发，再通过<code>push</code>将自己本地库<code>push</code>到自己的远程库中。然后向项目开发团队发送一个<code>push resquet</code>经由开发团队审核后可以传向开发团队的远程库，然后开发团队中的成员再<code>pull</code>到自己的本地库。</p></blockquote><p>依照这个流程我们梳理一下步骤</p><h5 id="对于团队开发">对于团队开发</h5><p>首先由项目创建人创建一个项目（本地库），然后通过<code>git init</code>    <code>git add</code>     <code>git commit </code>去提交到本地库，流程与前面没有差别，但这是使用的是全局化的签名，无需再设置新的项目签名。</p><h6 id="创建GitHub远程库"><strong>创建GitHub远程库</strong></h6><p>本地库创建好之后，我们需要设置远程库，具体的做法是在<a href="https://docs.github.com/cn/github/getting-started-with-github/quickstart/create-a-repo">GitHub上创建一个仓库</a>。</p><p>使用<code>git push</code>操作去将本地库push远程库</p><p>想要push操作，就一定要知道远程库的地址，在GitHub上创建地址后，我们可以在code哪里找到创建仓库的http和ssh地址，这个地址就是远程库的地址。</p><p>我们先用http地址连接到远程库</p><p>我们从code哪里将项目地址复制下来，但是网址很长，git提供了一个命令去给地址别名，</p><p>使用<code>git remote -v</code>查看地址的别名</p><p>使用 <code>git remote add &lt;别名&gt; &lt;地址&gt;</code></p><p>这是再次使用<code>git remote -v</code>查看，可以看到两个地址</p><img src="https://i.loli.net/2021/07/21/ytzwV6319emGIYQ.png" loading="lazy"><p>其中<code>fetch</code>用于取回，<code>push</code>用于推送</p><h6 id="向远程库推送">向远程库推送</h6><p>然后使用<code>git push</code>命令推送，注意推送时需要指出<strong>别名</strong>和要<strong>推送的分支</strong></p><img src="https://i.loli.net/2021/07/21/AN45p6IUJSyGXsh.png" loading="lazy"><p>按下回车键，这是会弹出GitHub登录的窗口，输入自己的GitHub账号</p><p>这样就把本地的修改推送到了远程库</p><h6 id="从远程库克隆">从远程库克隆</h6><p>那别人怎么将远程库clone到自己的本地库中呢？</p><p>我们可以使用<code>git clone &lt;地址&gt;</code>命令去将远程库克隆到本地库。</p><p>由于是读取操作，所以无需登陆账号</p><p>在执行完命令后，git会自动下载远程库中的内容，克隆出的本地库与远程库是一模一样的（包括文件，初始化，分支，和别名）</p><h6 id="团队之间的修改">团队之间的修改</h6><p>别人clone到本地库中做出修改，如果想要push到远程库，就需要项目创建人邀请加入团队。（具体的操作可以在google上查教程</p><p>）邀请成功后就可以将更新后的项目push到远程库了。</p><p>那么项目中的其他人可以将更新的版本<code>pull</code>到自己的本地库，</p><p><code>pull</code>有以下操作：</p><p><code>git fetch &lt;地址&gt; &lt;分支&gt;</code></p><p>fetch是不会直接修改本地库的文件，相当于把远程库的分支下载下来，</p><p>我们可以用<code>checkout</code>去检查。</p><p>然后使用<code>git merge&lt;地址别名|远程分支名&gt;</code></p><p>这两个操作和直接使用<code>git pull</code>命令是一样的。</p><p>这样同样会有另外的一个问题：怎样解决冲突?</p><p>如果双方修改了同一个项目同一个位置的不同内容，那么在往远程库push是就会发生冲突，GitHub默认是按照时间来判断的，也就是说如果两个人都开发了新版本，最快提交的会直接推送成功，而另一个如果有冲突就会push失败。这是就要把上一个人更新后的远程库pull到本地库，这是就会进入冲突状态，处理方法与前面处理分支方法类似。</p><h5 id="对于跨团队协作">对于跨团队协作</h5><p>不同团队之间共同开发时，只需要在GitHub上将远程库<code>fork</code>下来，这样就在自己的远程库中存储下了项目，修改就与前面完全相同。</p><p>如果想要提交到原开发团队，需要在GitHub上发出<code>pull request</code>，等待原项目创建负责人审核即可。</p><h2 id="结语">结语</h2><p>这个文章是我第一次写，无论是排版布局，还是内容深度，严谨性都有很多不足之处，而且配大量图算是一个失智之举，让这篇文章看起来十分冗杂，以后还是多用代码块来说明问题吧，这样不仅展示效果好，还附带有思考的空间。一味的将结果呈现出来，那是教程视频来干的事情，而不是博客文章。这篇算是一次试水，以后有时间我会将这些毛病改掉，给大家呈现出更精致，更适用的git笔记！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;这是我第一次发博客的学习文章，这个文章是我在学习git时做的笔记，为了弄懂我配了大量的图片，看完之后应该对git，github，版本控制都有一定的了解。当然这不是所谓的技术文章（事实上我现在也没能力去写技术文章），仅仅是把我的学习记录下来。文章是参考廖雪峰老师的git教程，和尚硅谷的git视频来写的。大家如果要学习的话建议去看看。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://liuhd.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="git|github" scheme="http://liuhd.com/tags/git-github/"/>
    
    <category term="版本控制" scheme="http://liuhd.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    <category term="学习笔记" scheme="http://liuhd.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://liuhd.com/2021/07/20/hello-world/"/>
    <id>http://liuhd.com/2021/07/20/hello-world/</id>
    <published>2021-07-20T12:12:35.881Z</published>
    <updated>2021-07-21T04:53:43.152Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: [Deployment</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
