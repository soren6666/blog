<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浅抹氵记忆的小站</title>
  
  <subtitle>change and challenge</subtitle>
  <link href="http://liuhd.com/atom.xml" rel="self"/>
  
  <link href="http://liuhd.com/"/>
  <updated>2021-10-24T15:22:42.965Z</updated>
  <id>http://liuhd.com/</id>
  
  <author>
    <name>浅抹氵记忆彡</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>路漫漫其修远兮</title>
    <link href="http://liuhd.com/2021/10/24/%E5%BC%80%E5%AD%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://liuhd.com/2021/10/24/%E5%BC%80%E5%AD%A6%E6%80%BB%E7%BB%93/</id>
    <published>2021-10-24T08:02:23.120Z</published>
    <updated>2021-10-24T15:22:42.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>如愿来到学校，开始了<a href>按计划</a>的学习。</p><p>如今一个月过去，就在这里做一个小总结，顺便“展望”一下自己的未来吧。</p><h2 id="过去"><a class="markdownIt-Anchor" href="#过去"></a> 过去</h2><h3 id="伊始"><a class="markdownIt-Anchor" href="#伊始"></a> 伊始</h3><blockquote><p>今年的9.24，我立了个flag，规划了自己三个月的学习。</p><p>为了激励自己学习，我发了空间和朋友圈，并将其置顶在了博客里。承诺如果未完成，就自罚500，并抽个3个人每人100元奖励。</p></blockquote><p>可能你以为我一定会认真学习，争取早日取得成绩。</p><p>然而，并没有。</p><p>事实上，我在家摆烂了半个月。这半个月里，我几乎没有任何学习，整天无所事事。究其原因，应该是我在很早之前就给过自己心理暗示，认为在家学习十分低效，不想在家学习。这样想来，应该是每当我想认真学习的时候，这个暗示就会跑出来“动摇”我，让我无法集中精力，并最终放弃。而偏偏因为疫情，我不得不宅家半月，就有了那样的结局。</p><p>就这样，时间来到10.8日，这天，我如愿来到学校，在经历了两天的整理后，我终于开始了“蓄谋已久”的学习。也就是说，在10.10日的那个周一，到10.24的这个周末，我在学校一共学习了两个星期。</p><h3 id="总结问题"><a class="markdownIt-Anchor" href="#总结问题"></a> 总结(问题)</h3><blockquote><p>下面就对这两个星期的学习做一个总结和评价</p></blockquote><p><strong>先说结论，我的在校学习，高动力但低效率。</strong></p><p>首先是高动力，我在学校的学习是十分积极的，每天早上起来到教室的路上，我会拿着手机用软件去背单词。每天晚自习结束后，我也会去图书馆前去背新概念的课文。平时的一些空闲时间，我会学习自己规划好的内容，有时候还会放弃午休去自习室学习。从时间上来看，我每天“学习”的时间得有10个小时以上，这反映出了我学习的积极性。</p><p>然后就是低效率，我在这“高强度”的学习下到底学到了多少东西呢？</p><blockquote><p>这里有我统计的一组数据，在过去的两周里，我看到了<code>C++primer</code>的前六章（书的第240页，总进度240/760，没做练习和笔记），数据结构的前5章（书的104页，总进度104/232，没做练习和笔记），复习了2800左右的单词（以前都背过的），背了两篇很短的新概念课文（新概念2，总进度2/90）。读完了一本《影响力》。</p></blockquote><p>这个数据乍一看不是很低，但请注意，我看这些书是没有做笔记和课后练习的，仅仅只是在书上画了线而已。英语方面更是少之又少，2800个单词都是之前背过的，在看到的时候只需要过一遍即可，拢共花的时间不到三小时。至于两篇课文，新概念2的课文，大家懂的都懂，一篇课文100来个单词，句子短的离谱（不过我是为了学习语调，背的少也无所谓了）。</p><p>这些东西真的需要我每天花10多个小时，学了两个星期才学完吗？答案是不需要，自我感觉如果认真一点，可能学完这些东西1个星期都不需要。</p><blockquote><p>什么原因导致了低效的学习呢？</p></blockquote><p>在探究之前，我想讨论一下我的学习方法。</p><p>按照我之前flag里的构想，我的<code>C++primer</code>应该是英文版的，数据结构的学习应该是看MIT的网课。同时要结合ipad和电脑，做一份全面的笔记。但这些计划在来到学校后，就变得理想化了。首先是开学第二天，我的ipad就因为屏幕上出现了绿线拿去给京东去返修了，直到前天才换新到手。这让我没有<code>C++英文版</code>，因为没有ipad上的MN3，我无法适应做笔记的节奏。所以我选择了中文版的书，并只是在上面画线，没有做笔记。同样是没有ipad，少了大屏，看网课的舒适程度大大降低，加之学校同样开了数据结构的课，作业什么的都需要上交，所以我选择了看书学习数据结构。</p><p>这样一来，我整个flag计划就都被打乱，让我开始的几天有点难以适应。但是因为不得不改变计划，也让我在学习的时候认识到我之前flag计划里的缺点。</p><p>我发现我flag里的计划都太理想化了，首先就是语言，英文版的内容固然更周到有趣，但受限于我的语言功底，看懂这些需要消耗大量的时间，这对于要争分夺秒打基础的我是十分不值得的。但我这个计划都是以英语学习体系为基石的，换成中文，那就要放弃几乎整个计划。其次是笔记方面，原先的我很依赖ipad上的MN3，因为它的强大与方便。会在我做笔记时省下很长时间。这好像给了我一个错觉，让我认为可以靠它很方便的做出任何科目的最完整的笔记而耗时很少，这让我在记笔记方向上钻了牛角尖，老是想着怎么笔记做的完整，而忽略了实际上一些科目更注重实践，一些容易的且重复的内容没必要浪费时间。</p><p>然后是懒散的学习心态，这个问题其实在家的时候就出现了，之前的文章中也提到过：</p><blockquote><p>我不再像高中和初中时那般有耐心：对于一些困难的东西，我总会潜意识决定要放在明天做。比如今天我要看C++primer，本来的计划是看两个小时，但是看到一个半小时的时候遇到了一个难点，不是很好理解，加之已经看了一个半小时了，就会想着休息一下，这短暂的放松让我重新面对这些问题时更加觉得困难。于是心里想着等明天再看，这个明天再看的心理是来源于自己潜意识里认为明天没有今天学那么多的东西，精力更加充沛，思维会更加活跃，而事实上，明天的我也未必会比今天更高效，状况非常多，可能今天熬夜看剧，明天会更累，或者明天早上起来肚子不舒服，或者因为一些小事和父母或者同学生闷气，这些都会影响我学习的效率。而且要命的是这些小的感受和情绪在学习的过程中会被放的很大，以至于我会带着烦躁的情绪去学习，效率更低。不但完不成自己定下的目标，而且看着拉下的越来越多，就越来越提不起精神去学习。再次回到最开始的状态。</p></blockquote><p>在这几天的学习过程中，虽然我会尽力的克制，但这方面的问题还是很大的影响到了我的学习效率。虽然不会向之前那样遇到问题会直接放弃学习，但当影响大到一个程度后，我就会心不在焉，注意力会时不时的放到其他方面。这点在课堂上老师讲课（老师越活跃，我的效率就会越低）时和平时的学习中有其他事情发生时（这个“事情”有很多种，比如要写一篇文章，网上买的东西要到了，或者被别人安排了其他的任务等等）尤为明显。我觉得这方面的原因时我分不清事情的优先级，总是下意识的把一些低优先级的事情放到学习上面，但心理上还是觉得学习这件事的优先级更高，这样就会在这些事情上抉择，导致注意力下降，学习效率也不高。</p><p>最后是对自己实力的过高评估，我在接受困难的任务后会变得很兴奋，总认为自己可以接下挑战并在短时间内完成的很好，这种状态仔细思考后可能是从初中产生的，那时候的实力确实很强（升高中时我是全校第一进入的实力最好的高中），那时，我在接受到挑战后总是可以完成的很好。所以可能养成了骄傲自大的这种隐性的性格，但到大学之后，知识体系变得更加复杂，很多任务并不容易，但我同样以初中的思维去考虑它，这就导致了我在设立目标时候的理想化，总是给自己很少的时间去做一些复杂困难的任务，到最后却无法在自己规定的时间完成，打乱了学习计划。</p><h3 id="解决办法"><a class="markdownIt-Anchor" href="#解决办法"></a> 解决(办法)</h3><p>这样看来，我学习效率低的原因总结下来有以下几点：</p><ul><li>理想化的学习方案</li><li>对自己实力的过高评估</li><li>懒散的学习心态</li></ul><p>那么，针对这些问题，也应该去想一些办法。</p><p>我想到的解决方案是重新制定学习计划，这个可能会需要一段时间的考察，一会会留下一个蓝本，然后在此基础上进行一些修改。在我现在的构想中，这个计划应该符合自己的水平，同时照顾到自己的心态，最重要的是，最大可能的将一些外在因素考虑进去，做到及时的更新。</p><h2 id="未来"><a class="markdownIt-Anchor" href="#未来"></a> 未来</h2><p>总结完了现在，是时候思考一下自己的未来了。</p><p>事实上，我曾经做过很多对未来的规划，对未来做过很多种考虑，但很多都没有考虑实际情况，算是空想，说的再难听一点是像做白日梦，由于内容过于难以启齿，在这里就不多说了。</p><p>现在，我又要开始做规划了，虽然肯定会有不合理的地方，不过我还是挺喜欢那种畅想未来的时候那种沉浸其中的感觉。</p><p>这次规划分成两个部分，短期（大二）和长期（大三和大四）两个部分。</p><h3 id="短期规划"><a class="markdownIt-Anchor" href="#短期规划"></a> 短期规划</h3><p>我把短期时间分成下面几段：</p><ul><li><p>现在</p></li><li><p>flag结束（1.1号）</p></li><li><p>蓝桥杯开始（明年3月底）</p></li><li><p>大二结束</p></li></ul><ol><li><p>现在到flag结束</p><p>这段时间还是和上次flag的基本目标一致，但是计划会做很大的变化。目的是打好C++和数据结构的基础</p></li><li><p>flag结束到蓝桥杯开始</p></li></ol><p>这段同样是打基础的时间，这个时期应该是最紧张的，要把算法基础打好，同时还要刷题去提高应对比赛</p><ol start="3"><li>蓝桥杯结束到大二结束</li></ol><p>这个时期数据结构算法方面的基础就应该打好了，就要开始考虑一些其他的东西了，这个方面具体还没想好（前端？后端？）。</p><h3 id="长期计划"><a class="markdownIt-Anchor" href="#长期计划"></a> 长期计划</h3><p>长期规划最主要是教资和考研以及它们附带下来的一些考试（四六级）。</p><p>这部分就没有具体的计划了，只有大体的方向。简单说一下。</p><h4 id="四级六级"><a class="markdownIt-Anchor" href="#四级六级"></a> 四级|六级</h4><p>四级时间是明年的六月份，感觉不会有什么问题。六级应该是在大三考试（还不是很了解）</p><h4 id="教资"><a class="markdownIt-Anchor" href="#教资"></a> 教资</h4><p>教资算是大学里面第一场重要的考试了，这场考试一定要好好准备。说到当老师，我的感觉并不是十分强烈，可能骨子里还是有一种想要往前走的意志吧。不过还是要把教资当做自己的后路。考试时间是明年的10月底。</p><h4 id="考研"><a class="markdownIt-Anchor" href="#考研"></a> 考研</h4><p>如果说教资是后路，那么考研就是往前走的跳板，这个算是第二场重要的考试了，也要好好准备。这个我准备前面数据结构和算法的基础打好之后就开始着手规划了，我给自己定的目标是至少是个211。因为不想像高考一样留下那么大的遗憾。</p><h3 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h3><blockquote><p>不管是短期还是长期的规划，都是非常具有挑战性的，要做非常细致的规划，还要有巨大的勇气和毅力。总之，要开始卷起来了！</p></blockquote><h2 id="碎碎念"><a class="markdownIt-Anchor" href="#碎碎念"></a> 碎碎念</h2><p>要说的都说完了，感觉写的还是挺沉重的，诚然， 问题很明明显。但是找到问题就有解决的可能，所以未来的路还是很明朗的。我从来都没有怀疑过这条路的准确性。所以只需要坚定地走下去就行了。</p><p>其实我感兴趣的东西还是有很多，如在github上维护一个项目。自己写个小游戏等等。随着C++和数据结构的深入，这些东西都要提上日程了。</p><blockquote><p>总之，希望自己成为一个有趣的人！</p></blockquote><blockquote><p>Change and Challenge！</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;如愿来到学校，开始了&lt;a href&gt;按计划&lt;/a&gt;的学习。&lt;/p&gt;
&lt;p&gt;如今一个月过去，就在这里做一个小总结，顺便“展望”一下自己的未来吧。&lt;</summary>
      
    
    
    
    <category term="flag" scheme="http://liuhd.com/categories/flag/"/>
    
    
  </entry>
  
  <entry>
    <title>《数据结构》第二章：线性表</title>
    <link href="http://liuhd.com/2021/10/15/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%8B/"/>
    <id>http://liuhd.com/2021/10/15/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BA%BF%E6%80%A7%E8%A1%A8%E3%80%8B/</id>
    <published>2021-10-15T11:37:49.974Z</published>
    <updated>2021-10-18T23:42:25.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表"><a class="markdownIt-Anchor" href="#线性表"></a> 线性表</h2><h3 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h3><blockquote><p>有n（n&gt;=0）个数据特性相同的元素构成的有限序列成为线性表</p></blockquote><p>事实上，数据结构是为了方便解决问题抽象出来的一种概念，每一种编程语言都有使用数据结构的相关语法。从这方面看，数据结构处在概念层，而编程语言对数据结构的实现则处在应用层。在<code>C++</code> 中，类是用户定义的普通类型，用户可以与它来自定义变量。所以使用<code>C++</code>来创建数据结构十分方便。</p><p>从定义上来看，<code>C++</code>中的数组和vector容器都可以算作线性表的一种。当然，这些都是<code>C++</code>的内置类型，是现成可以使用的，虽然简单，但不灵活。遇到一些复杂的问题可以通过创建类来构造适合问题的线性表。</p><p><strong>由于线性表是由n个元素组成，所以线性表的表长是n，当n为0时，线性表是空表。</strong></p><blockquote><p>对于非空的线性表或线性结构，有以下特点：</p></blockquote><ul><li>存在唯一的一个被称作“第一个”的数据元素；</li><li>存在唯一的一个被称作“最后一个”的数据元素；</li><li>除了第一个之外，结构中的每一个数据元素均只有一个前缀；</li><li>除了最后一个之外，结构中的每一个数据元素均只有一个后缀；</li></ul><h3 id="线性表中的顺序表"><a class="markdownIt-Anchor" href="#线性表中的顺序表"></a> 线性表中的顺序表</h3><h4 id="定义-2"><a class="markdownIt-Anchor" href="#定义-2"></a> 定义</h4><p>因为是一个“表”，所以可以自然的联想到应该一个连续的位置来存放这个“表”，这就是顺序表，它是用一组地址连续的存储单元依次存储线性表的数据元素。特点是逻辑上相邻的数据元素，其物理次序也是相邻的。</p><p>因为顺序表中的数据元素是相邻的。所以，只要确定了存储线性表的起始位置，线性表中的任何一个数据元素都可以找到。</p><h4 id="顺序表的创建"><a class="markdownIt-Anchor" href="#顺序表的创建"></a> 顺序表的创建</h4><blockquote><p>先把前面的一些声明写在<code>Status.h</code>的头文件中</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#ifndef STATUS_H#define STATUS_H#include&lt;iostream&gt;&#x2F;*  状态码 *&#x2F;#define TRUE 1#define FLASE 0#define OK 1#define ERROR 0&#x2F;&#x2F; 系统中已经有此代码的定义，要防止冲突#ifndef OVERFLOW #define OVERFLOW -2#endif&#x2F;&#x2F;系统中已有此状态码定义，要防止冲突#ifndef NULL#define NULL ((void*)0)#endif&#x2F;* 状态码类型 *&#x2F;typedef int Status;#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，在Status.h的头文件已经将一些基本的状态码声明出来。</p><blockquote><p>顺序表的创建</p></blockquote><p>前面说过，类的创建最好在头文件中，所以我们创建一个SqList.h的头文件</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; * 线性表的顺序存储结构（顺序表） * * 包含算法: 2.3、2.4、2.5、2.6 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;#ifndef SQLIST_H#define SQLIST_H#include &lt;iostream&gt;#include &quot;Status.h&quot;     &#x2F;&#x2F;**▲01 绪论**&#x2F;&#x2F;&#x2F;* 宏定义 *&#x2F;#define LIST_INIT_SIZE 100  &#x2F;&#x2F; 顺序表存储空间的初始分配量#define LISTINCREMENT  10   &#x2F;&#x2F; 顺序表存储空间的分配增量&#x2F;* 顺序表元素类型定义 *&#x2F;typedef int ElemType;&#x2F;* * 顺序表结构 * * 注：elem在使用前需要先为其分配内存，且元素从elem[0]处开始存储 *&#x2F;typedef struct &#123;    ElemType* elem;     &#x2F;&#x2F; 顺序表存储空间的基址（指向顺序表所占内存的起始位置）    int length;   &#x2F;&#x2F; 当前顺序表长度（包含多少元素）    int listsize; &#x2F;&#x2F; 当前分配的存储容量（可以存储多少元素）&#125; SqList;#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序的第25-29行是顺序表的建立。</p><h4 id="顺序表基本操作的实现"><a class="markdownIt-Anchor" href="#顺序表基本操作的实现"></a> 顺序表基本操作的实现</h4><p>基于顺序表的特点，可以实现一些基本操作。操作写在SqList.c里</p><h4 id="21-初始化"><a class="markdownIt-Anchor" href="#21-初始化"></a> 2.1 初始化</h4><blockquote><p>顺序表的初始化操作就是构建一个空的顺序表</p></blockquote><p>在创建完顺序表后就可以对其进行初始化，</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; * 线性表的顺序存储结构（顺序表） * * 包含算法: 2.3、2.4、2.5、2.6 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;#include &quot;SqList.h&quot;&#x2F;* * ████████ 算法2.2 ████████ * * 初始化 * * 初始化成功则返回OK，否则返回ERROR。 *&#x2F;Ststus InitList_Sq(SqList *L)&#123;    &#x2F;&#x2F;构建一个空的顺序表L    (*L).elem &#x3D; new ElemType[LIST_INIT_SIZE]    &#x2F;&#x2F;为顺序表分配空间            if((*L).elem)    if((*L).elem)        exit (OVERFLOW);                        &#x2F;&#x2F;分配空间失败    (*L).length &#x3D;0;                             &#x2F;&#x2F;空表长度为0    return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="22-顺序表的取值"><a class="markdownIt-Anchor" href="#22-顺序表的取值"></a> 2.2 顺序表的取值</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* * ████████ 算法2.2 ████████ * *取值 *判断值的位置是否合理，否则返回ERROR * 将第i个数据元素elem[i-1]赋给e *&#x2F;Status GetElem (SqList L,int  i,ElemType *e)&#123;    if(i &lt; 1 || i &gt; L.length)        return ERROR;    else        *e &#x3D; L.elem[i-1];    return OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="23顺序表的查找"><a class="markdownIt-Anchor" href="#23顺序表的查找"></a> 2.3顺序表的查找</h4><ul><li>按序号查找（通过下标）</li><li>按值查找（算法2.2）</li></ul><blockquote><p>按值查找。</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* * ████████ 算法2.3 ████████ * * 查找 * * 按值查找 * 从第一个元素起，每个元素都与要查找的元素e作比较 * 如果有和e相等的元素L.elem[i]，那么查找成功 * 返回i+1（第i+1个元素） *&#x2F;Status  LocateElem(SqList L,ElemType *e)&#123;    &#x2F;&#x2F;在顺序表L中查找值为e的元素，返回其序号    for (int i &#x3D; 0; i &lt; length; ++i) &#123;        if(*L.elem[i]&#x3D;&#x3D;e)            return i+1;       &#x2F;&#x2F;查找成功，返回序号I+1        else            return  0;        &#x2F;&#x2F;查找失败，返回序号0    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="24-顺序表的插入"><a class="markdownIt-Anchor" href="#24-顺序表的插入"></a> 2.4 顺序表的插入</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* * ████████ 算法2.4 ████████ * * 顺序表的插入 * * 判断插入位置I是否合法 * 判断顺序表的存储空间是不是已满 * 将第n到第i个位置依次向后移动一个单位 * 将要插入的新元素e放到第i个位置 *&#x2F;Status  ListInsert(Sqlist *L,int i,ElemType e)&#123;    &#x2F;&#x2F;在顺序表L中第i个位置插入值为e的元素，i的合法法范围是[1，L。length+1]     if(i&lt;1 || i &gt; L.length+1)         return ERROR;                               &#x2F;&#x2F;i的值不合法     if(L.length &#x3D;&#x3D;LIST_INIT_SIZE)         return  ERROR;                              &#x2F;&#x2F;i的值不合法    for (int j &#x3D; L.length-1; j &gt;&#x3D; i-1 ; --j) &#123;        L.elemn[j+1] &#x3D; L.elem[j];                    &#x2F;&#x2F; 插入位置后的各个元素向后移    &#125;    L.elem[i-1] &#x3D; e;                                 &#x2F;&#x2F; 将e赋给插入位置    ++L.length;                                      &#x2F;&#x2F; 表长加一    return  OK;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="25-顺序表的删除"><a class="markdownIt-Anchor" href="#25-顺序表的删除"></a> 2.5 顺序表的删除</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*  * ████████ 算法2.5 ████████ *  * 顺序表的删除 *  * 判断删除位置是否合法 * 将第i+1到n的元素依次向前移动一个单位 * 表长减一 *&#x2F;Status  ListDelete(SqList *L,int i)&#123;    &#x2F;&#x2F;将顺序表中第i个元素删除，i的合法范围是[1.L.length]    if(i&lt;1 ||i &gt;L-&gt;length)        return ERROR;                              &#x2F;&#x2F;i的值不合法    for (int j &#x3D; i; j &lt;&#x3D;L.length-1 ; ++j) &#123;        L.elem[j - 1] &#x3D; L.length[j];               &#x2F;&#x2F; 删除位置后的元素前移    &#125;                   --L.length;                                    &#x2F;&#x2F; 表长减一                                  return OK;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上就是顺序表的相关操作，除了初始化之外，和数组基本一致。都是最基本的操作，故不做练习。</p></blockquote><h3 id="链表"><a class="markdownIt-Anchor" href="#链表"></a> 链表</h3><h4 id="定义-3"><a class="markdownIt-Anchor" href="#定义-3"></a> 定义</h4><blockquote><p>链表同样也是线性表，只不过相邻元素不直接连接，而是通过指针连接。所以链表的每一个位置都有两个元素，一个是存储的值（数据域），另一个是指向后继的指针（指针域）。链表在物理存储上也是不连续的。</p></blockquote><h4 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h4><blockquote><p>单链表只有一个指针域，指向后继的结点</p></blockquote><h5 id="链表的创建"><a class="markdownIt-Anchor" href="#链表的创建"></a> 链表的创建</h5><p>同样的，为了声明一些状态量，我们有Status.h的头文件。（在上面）。</p><blockquote><p>链表定义在LinkList.h中</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;线性表&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#线性表&quot;&gt;&lt;/a&gt; 线性表&lt;/h2&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#定义&quot;&gt;&lt;/a&gt; 定义&lt;/h3&gt;
&lt;blockq</summary>
      
    
    
    
    <category term="笔记" scheme="http://liuhd.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构" scheme="http://liuhd.com/categories/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="线性表" scheme="http://liuhd.com/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
    <category term="数据结构" scheme="http://liuhd.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构学习笔记</title>
    <link href="http://liuhd.com/2021/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liuhd.com/2021/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-10-15T11:20:15.993Z</published>
    <updated>2021-10-17T23:55:53.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>之前在flag里不想要用教材去学数据结构，本来打算是去看MIT的网课，但是发现这样并不能逃掉学校里的数据结构课程，而且看了严奶奶的数据结构教材，确实十分对我的胃口，所以现在“真香”了。</p><p>虽然使用的是大学的教材，但听课跟我还是占不着边，我依然是自学为主。严奶奶的这本教材十分严谨简洁，但因为使用的是介于C和C++的类C语言，而且从来不写代码前面的一些声明，所以读起来算是有点晦涩的。</p><p>我在做笔记时，会把前面的代码声明补充进去，而且将其中的数据结构和算法以C++实现。并附上自己的理解。</p><p>因为是自学，所以速度必须要快。所以不会对书中的习题作答。这本书算是打基础，后面还有《数据结构和算法分析》和《算法》，以后也会做笔记的。</p><h2 id="读前须知"><a class="markdownIt-Anchor" href="#读前须知"></a> 读前须知</h2><h3 id="头文件"><a class="markdownIt-Anchor" href="#头文件"></a> 头文件</h3><blockquote><p>拿第二章第一节的线性表的的顺序存储来举例，假设我们要创建一个顺序表的数据结构，按照传统的写法，我们可能会这样写。</p></blockquote><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#define OK  1#define ERROR  0#define OVERFLOW -2 typedef int  Status;          &#x2F;&#x2F;通过typedef 类型别名来给int这一个整型命名为Status#define MAXSIZE 100          &#x2F;&#x2F;顺序表可能的达到的最大长度&#x2F;&#x2F;顺序表的创建typedef  struct&#123;             &#x2F;&#x2F;struct是结构体语句，用来创建数据结构，typedef类型别名将这个数据结构命名为SqList    int *elem;               &#x2F;&#x2F;存储空间的基地址，是一个数组指针（elem是一个指针，指向的是一个数组）    int length;             &#x2F;&#x2F;length表示表长    return OK;&#125;SqList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，代码的第8-12行创建了一个顺序表，命名为SqList。顺序表内部有一个指针数组用来存放基地址，有一个length整型表示表长。</p><p>这样写当然没有什么问题，但这仅仅表示的是创建顺序表这一个操作，为了这一个操作，我们需要写前面的声明，需要定义宏常量，必要的时候还要写类型别明。</p><p>接下来我们还会对顺序表进行初始化、插入、删除等一系列操作，这一系列操作都会建立在顺序表已经创建的情况下。我们的目的是记笔记，要的是高高可读性，这就需要我们的代码简洁和高效。</p><p>如果每一种操作都要附上一大堆的声明和前面的一些操作，这显然不符合我们的要求。但是如果都不写，又势必会影响到笔记的连贯性。</p><blockquote><p>那么就没有解决办法了吗？</p></blockquote><p>答案是：有，可以使用头文件解决问题。关于头文件，可以看这个：<a href="https://www.runoob.com/w3cnote/cpp-header.html%E3%80%82">https://www.runoob.com/w3cnote/cpp-header.html。</a></p><p>简单来说：我们只需要在一个源文件中写操作，然后把它引入到头文件中，再把头文件引入到整体的程序中去即可，这样就没必要去做多次的声明，而且可以让程序要更好的封装性。减小了使用的难度和错误率。</p><p>为此，在每一个数据结构中，我们都有三个文件，还是以顺序表举例，我们有：存放操作的源文件——SqList.c，头文件——SqList.h。主体文件——SqList-main.c   。</p><p>按照这种形式，在写算法实现代码时，我会在开始将代码的主体框架写出来，在遇到每一个操作时，我会指出这些代码将要写在哪里，起了什么作用。最后，我会给出整体的代码文件，大家可以靠着这个来系统的查看。</p><h3 id="事例说明"><a class="markdownIt-Anchor" href="#事例说明"></a> 事例说明</h3><p>书中的算法仅展示了分析部分，并无事例演示，所以我会尽量的找一些代表性的例子去实践这些数据结构，并将代码和解析附在文末。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;之前在flag里不想要用教材去学数据结构，本来打算是去看MIT的网课，但是发现这样并不能逃掉学校里的数据结构课程，而且看了严奶奶的数据结构教材，</summary>
      
    
    
    
    <category term="笔记" scheme="http://liuhd.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构" scheme="http://liuhd.com/categories/%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://liuhd.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>《人间失格》</title>
    <link href="http://liuhd.com/2021/09/27/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/"/>
    <id>http://liuhd.com/2021/09/27/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/</id>
    <published>2021-09-27T15:07:02.160Z</published>
    <updated>2021-09-27T15:16:02.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="21-9-27"><a class="markdownIt-Anchor" href="#21-9-27"></a> 21-9-27</h2><p>书看完了，十分压抑的感觉。</p><p>或许从未经历过绝望，或许没有那么深的阅历。</p><p>但作为一个心思敏感的人，读书时也设想过如果在相同的处境，我自己的做法或许并不那么极端，但与主人公仍然会有很多相似之处。</p><p>这本书我会重读很多遍，希望可以读出更多不一样的东西。</p><p>文笔十分不错，溢出书本的孤独、压抑、挣扎中带着乐观与期望。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;21-9-27&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#21-9-27&quot;&gt;&lt;/a&gt; 21-9-27&lt;/h2&gt;
&lt;p&gt;书看完了，十分压抑的感觉。&lt;/p&gt;
&lt;p&gt;或许从未经历过绝望，或许没有那么深的阅历。&lt;/p&gt;
&lt;p&gt;但作为一个心思</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://liuhd.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="http://liuhd.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《杀死一只知更鸟》</title>
    <link href="http://liuhd.com/2021/09/22/%E6%9D%80%E6%AD%BB%E4%B8%80%E5%8F%AA%E7%9F%A5%E6%9B%B4%E9%B8%9F/"/>
    <id>http://liuhd.com/2021/09/22/%E6%9D%80%E6%AD%BB%E4%B8%80%E5%8F%AA%E7%9F%A5%E6%9B%B4%E9%B8%9F/</id>
    <published>2021-09-22T13:51:40.515Z</published>
    <updated>2021-09-22T15:00:03.596Z</updated>
    
    <content type="html"><![CDATA[<img src="https://i.loli.net/2021/09/22/uYyOjeoFzUNk7QI.jpg" loading="lazy"><span id="more"></span><h2 id="作者简介-豆瓣"><a class="markdownIt-Anchor" href="#作者简介-豆瓣"></a> 作者简介     @豆瓣</h2><blockquote><p>哈珀•李（1926— ）</p></blockquote><blockquote><p>生于美国阿拉巴马州， 曾被授予普利策小说奖及其他众多文学奖项。她与杜鲁门•卡坡蒂是幼年的邻居和一生的朋友。《杀死一只知更鸟》据说是以卡坡蒂为原型之一创作的，现已成为公认的美国文学经典。此后，她一直隐居在家乡亚拉巴马的小镇上 ，拒绝各种采访，过着平静的生活。有人问她为什么不在盛名之下接着写作，她回答：“有过这样一次，还有什么可写的？”</p></blockquote><h2 id="内容简介-豆瓣"><a class="markdownIt-Anchor" href="#内容简介-豆瓣"></a> 内容简介   @豆瓣</h2><blockquote><p>成长总是个让人烦恼的命题。成长有时会很缓慢，如小溪般唱着叮咚的歌曲趟过，有时却如此突如其来，如暴雨般劈头盖脸……三个孩子因为小镇上的几桩冤案经历了猝不及防的成长——痛苦与迷惑，悲伤与愤怒，也有温情与感动。这是爱与真知的成长经典。</p></blockquote><h2 id="读书笔记"><a class="markdownIt-Anchor" href="#读书笔记"></a> 读书笔记</h2><p>读此书时还没有要写读书笔记的概念，所以我挑了一篇不错的书评来看，这个书评来自微信读书，作者是@<strong>哆啦蒙太奇</strong></p><blockquote><p><strong>这份悲观，点缀着说好的勇敢</strong></p><p>《杀死一只知更鸟》是一本关于勇气和成长的书，它对勇敢的定义是：“在你还没开始的时候就知道自己注定会输，但依然义无反顾地去做，并且不管发生什么都坚持到底。”<br>很显然，这不是每个人都能做到或情愿去做的，也正因如此，这份勇敢才显得弥足珍贵。《杀死一只知更鸟》中的阿迪克斯就是一位勇士，在“大萧条”时期的美国南部，他明知替黑种人打官司几乎毫无胜算，甚至还可能搭上孩子们的安全和自己的声誉，但他还是选择挺身而出。全书用上几乎所有的篇幅诠释了这种追求真理永不言败的英雄观，满满正能量使得该书成为美国中小学必读书目、图书馆借阅次数最高的图书，并在一次民意调查中力压《圣经》，获得“最具启示意义的书”称号。<br>但是，或许因为我已经错过了阅读这本书的最佳时机——青少年时期，我从中联想到现实中一些令人悲观的现象，而这些造成悲观情绪的因素正源于书中那些本该触动人心、催人向善的故事设定。<br>完美的人设有赖独特的视角<br>“阿迪克斯是一位完美的父亲、完美的公民、完美的绅士。”我想大多数读过这本书的人都会对阿迪克斯做出这样的评价。的确，他性格温柔善良却在关键时刻勇敢无畏，他有体面的身份却致力于帮助底层黑人维护权利，他身负惊人绝技却从不卖弄、更不滥用，即使在最波澜不惊的日常生活中，他也显得风度翩翩、温文尔雅，对孩子体贴入微、对邻居充满善意。电影版《杀死一只知更鸟》还找来主演《罗马假日》的大帅哥格里高利·派克来饰演阿迪克斯（派克因此片获得奥斯卡最佳男主角），以至于很多读者高声宣布“也想要这样的爸爸”或者“想嫁给阿迪克斯”。<br>现实中有这样完美的人吗？我认为没有。<br>之所以得出这样的结论，并不是因为我的嫉妒心在作祟。在有了更多生活阅历和阅读积累之后我发现，很多人眼中如同“圣人”一般的人物其实也都存在各种各样的缺点：或许他非常博学，但他也盛气凌人；或许他将毕生献给伟大的事业，但他也追求声色犬马；他在外面人缘极佳，对家人却尖酸刻薄……不一而足。<br>虽然艺术形象历来是高于生活的，但当这个形象完美到超凡脱俗的时候，他所做的事就没那么可信了，至少打动人心的力量会打一些折扣。<br>好在完美的阿迪克斯不是客观意义的阿迪克斯，他只是斯库特和杰姆眼中的阿迪克斯，他的所作所为，是有经过两个孩子天真无邪的目光过滤的。成年人看来大大小小的毛病，在斯库特和杰姆这里根本意识不到。这正如父母如果是个优秀的人，ta在孩子眼里就一定是个完美的人。即使ta有时候固执己见、不干家务、啰里啰嗦、毫无浪漫感、对现状不满，但这些对于孩子来讲又算得了什么呢？<br>以孩子的视角来讲述这个摒除偏见的故事，正是这本书的一大特色。故事的前半段着重描写了几个孩子的日常生活和他们独具特色的游戏，后半段主线才逐渐趋于明朗。而他们的童年阴影“怪人拉德利”则作为一个隐藏支线贯穿全程，从打小对“怪人”根深蒂固的偏见到经历过成长后对“怪人”报以善意，孩子独特的视角不仅讲通了“阿迪克斯为何完美”，还给予读者一种从无到有、云开雾散的豁然感。<br>有意的歧视源于无意的偏见<br>书中关于白种人对黑种人的歧视发人深思，这种歧视从黑奴贸易时期到故事的发生时间“大萧条”时期，足以发展到在所有人心中根深蒂固的程度，即使有关于解放黑奴、人人平等的法律也难以例外。<br>现在，经过一代又一代的努力（当然这本书也起到了一定的助推作用），黑种人的地位得到极大提升。尽管仍有不少人（不止白种人）从内心厌恶黑人，但绝不可否认如今黑种人的生活状态不再是书中所描写的那般凄惨景象了。<br>但歧视链是不是就此根除了？绝没有，各种歧视仍然无处不在。不仅一些白种人还在歧视黑种人，事实上，一些黑种人甚至还会歧视白种人；又或者一些黑种人歧视黄种人的事也时有耳闻。<br>而更令人细思极恐的地方在于，这些有意识的歧视均脱胎于无意识的偏见。<br>何谓“无意识的偏见”？举个例子，在经典电影《十二怒汉》中有这么一个桥段：十二名陪审团成员在讨论一个来自贫民窟的黑人孩子是否是杀死他白人养父的真凶。其中多数人认为这没什么可讨论的价值，嫌疑人是黑人，还来自贫民窟，没有受过良好教育，品性顽劣，这些因素导致他们坚信凶手绝非他人。但他们绝不会承认（或从内心真的不认为）自己是个存在偏见的人，因此他们的偏见看似是“无意识”的，或说是潜意识的。<br>值得深思的是，不是只有西方人才有这种“无意识偏见”。国内后来翻拍自《十二怒汉》的《十二公民》中，这个桥段改为：十二名学生家长模拟陪审团，讨论一个关于被收养的富二代杀害养父的案件。由于这个孩子的生父是来自河南的务工人员，所以一些家长认为案情已经十分明朗，“养尊处优的富二代”和“河南务工人员”就很能说明问题了，他毫不感恩、他骄奢淫逸、他素质低下、他劣根难除，统统可以让此案盖棺定论。<br>顺带一提，我就是河南人。<br>“无意识的偏见”是“有意识的歧视”前奏，虽然很遗憾，但这种来自潜意识的偏见广泛存在于我们每个人的心中——“他家穷，所以他素质肯定不高”“他脾气大，对父母肯定不孝顺”“他喜欢跟异性说说笑笑，肯定对另一半不忠”等等。而《杀死一只知更鸟》借用“怪人拉德利”一家的故事告诉我们：这些都是需要我们有意识去杜绝的“无意识偏见”。<br>误伤知更鸟以及谁是知更鸟<br>这本书如果按照字面意思来翻译，其实应该叫做《杀死一只反舌鸟》，但译者“擅自”改为知更鸟我认为是绝对的明智之举。<br>知更鸟是一种小型鸣禽，性格温顺驯良，经常会毫无防备地飞到人身边寻找食物，被视为最亲近人类的动物之一而备受欢迎。知更鸟是为数不多维系大自然与人类的情感纽带，是人与自然交流互动的桥梁。所以，杀死知更鸟这种行为，意味着破坏和践踏这份宝贵的信任。<br>在书中，黑人小伙汤姆·鲁宾逊就是一只与世无争的“知更鸟”，但他的满腔善意并没能换来和谐友爱，最终被偏见和歧视组成的利剑杀死。<br>看起来，这似乎跟我们自身没什么关系，我们不可能做出这样伤天害理以怨报德的事情来。其实倒不一定。尽管我们可能没有“杀死”过任何一只“知更鸟”，但我们必定误伤或刻意伤害过。<br>我们再来讲讲上面的例子。我是河南人，当我意识到很多人对河南人存有偏见，我不可避免的在和外省的朋友接触时潜意识中会隐存自卑感和负罪感。“我被人瞧不起”和“我某位老乡曾做过让人瞧不起的事”，这块石头始终压在我的心底。尽管我没做过自认为出格的事，我的生活也谈不上受到多大影响，但谁也无法否认这根是永远无法拔除的。<br>“男人都是大猪蹄子，只会用下半身思考，永远只爱18岁小姑娘。”<br>“女人找对象只认钱，只要有钱，比她爸大的男人都愿意嫁。”<br>“护士每天照顾病人很累，回到家比谁都懒，千万别娶护士。”<br>“工人每天跟机器接触，会懂浪漫吗？会有情调吗？千万别嫁工人。”<br>“你985毕业的，怎么会来干这行啊？想什么呢？”<br>“他身上有病，说不定平时都不怎么检点的。”<br>······<br>这样的误伤，你承受过吗？这样的误伤，你做出过吗？<br>或许，我们只想做一只和他人亲近的知更鸟，别无他意。但我们会被误伤，我们也会在不自觉间误伤别人。“怪人拉德利”不就是吗？斯库特和杰姆明明是好孩子，为什么他们会认准拉德利是可怕的怪胎呢？<br>我们只能归结于与生俱来的天性。<br>结语<br>阿迪克斯只是一个有良知的普通人，他并不完美，我们也不可能完美。<br>无意识的偏见人人都有，如果不加抑制，将会升级为有意识的歧视。<br>我们都曾因偏见误伤过“知更鸟”，我们自身也都做过“知更鸟”。<br>人类，古往今来从没有逃脱过这些定律。<br>这些悲观的结论，我们应该如何去面对？《杀死一只知更鸟》告诉我们：你明知自己会输，但仍然义无反顾的去做，并且无论发生什么都会坚持到底。这就是勇敢。<br>我愿做一名勇敢的人，这些悲观，只是这份勇敢的点缀。偏见和歧视或许永远不会被彻底根除，但我选择相信，人类会不断成长，越来越多的人会选择勇敢的去成长。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://i.loli.net/2021/09/22/uYyOjeoFzUNk7QI.jpg&quot;&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="http://liuhd.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="http://liuhd.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>立一个flag</title>
    <link href="http://liuhd.com/2021/09/20/%E5%BC%80%E5%AD%A6flag/"/>
    <id>http://liuhd.com/2021/09/20/%E5%BC%80%E5%AD%A6flag/</id>
    <published>2021-09-20T13:47:22.589Z</published>
    <updated>2021-09-22T15:33:20.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><blockquote><p>上一篇<a href="https://liuhd.com/2021/09/14/%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/">关于未来的思考（碎碎念）</a>，总结了不少的问题，也尝试提出过一些解决办法。但据我开始写上一篇，已经过去整整一周了。这一周的时间里，我给自己找了各种各样的理由，将这些我本来应该立即执行的任务搪塞了过去。（<s>有一说一，宅在家里真的挺爽</s>），但这样下去我依然是个废物，没有任何改变。正好今天看b站时在热榜上看到了一个克服社恐的视频——<a href="https://www.bilibili.com/video/BV1mh411p79S?from=search&amp;seid=16274933938089722126&amp;spm_id_from=333.337.0.0">3句话，让你从社交恐惧→社交牛逼 | 奸商套路分享</a>。对里面<strong>通过立flag来提高面对社恐的执行力</strong>十分认同。正好我既废物又有社恐。于是就趁着这个发热冲动期立下一个未来学习的flag。并把它置顶，激励我的学习。也<strong>欢迎大家打脸</strong>。</p></blockquote><img src="https://i.loli.net/2021/09/22/NQDbCqOYPeWhkB7.jpg" loading="lazy"><span id="more"></span><h2 id="具体flag"><a class="markdownIt-Anchor" href="#具体flag"></a> 具体flag</h2><blockquote><p>首先，我是一个CS（计算机科学）专业的学生，（<s>虽然大一混过去了</s>），所以以下的学习基本围绕这一专业来开展。而关于学习路线的规划，是我在国内外各个社区，通过大牛的经验总结出来的（最后放上参考链接和图片），所以科学性是会有一些保证的。</p></blockquote><p>目前要做的主要事情只有两个：C++和数据结构</p><p>下面开始具体的目标，执行方法（通过表格形式列出）</p><table><thead><tr><th>科目</th><th>方法</th><th>目标</th><th>时间</th></tr></thead><tbody><tr><td>C++</td><td>看书：《C++primer》（英文原版）</td><td>看完书的前十二章，并做好笔记，最重要的是建成知识库</td><td>三个月（9.27-1.1（元旦））</td></tr><tr><td>数据结构</td><td>网课（MIT6.006算法导论）</td><td>看完网课，完成作业和测试</td><td>三个月（9.27-1.31（元旦））</td></tr><tr><td>看书</td><td><a href="https://liuhd.com/2021/09/13/%E5%BF%83%E7%90%86%E5%AD%A6%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E5%AF%BC%E8%AF%BB/">读自己感兴趣的书</a></td><td>将<a href="https://liuhd.com/2021/09/13/%E5%BF%83%E7%90%86%E5%AD%A6%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E5%AF%BC%E8%AF%BB/">列表</a>在内的书看完，并做好读书笔记</td><td>三个月（9.27-1.31（元旦））</td></tr></tbody></table><h2 id="学习细节"><a class="markdownIt-Anchor" href="#学习细节"></a> 学习细节</h2><h3 id="资料介绍"><a class="markdownIt-Anchor" href="#资料介绍"></a> 资料介绍</h3><blockquote><p>上面的学习内容基本上通过i电子设备实现，我的设备是2020款的iPad Pro、一台联想笔记本和一部华为手机。</p></blockquote><ul><li><p>C++primer（英文版）</p><p>共1399页，（照片放在最下面），前十二章共614页。我会把不认识的英语单词做成卡片，就像下面的图片那样。让后通过iPad，电脑，手机间各种软件的结合完成一个知识库集成到OneNote上。最后学习成果的检验也会放在这里。把这本书的习题认认真真的完成一遍。</p></li><li><p>数据结构</p><p>这个是个很大的科目，MIT并没有专门的数据结构课程，大量的数据结构的知识都包含在算法课程里面，前面提到的6.006算法导论就是最入门的一门课程，共有24课，视频在YouTube上，作业共有7课。</p></li></ul><h3 id="资料展示"><a class="markdownIt-Anchor" href="#资料展示"></a> 资料展示</h3><blockquote><p>这个部分是我资料的图片介绍</p></blockquote><p>C++primer：</p><p><img src="https://i.loli.net/2021/09/21/VKZdlxcrpAYmzbD.png" alt="Audits - Lighthouse" loading="lazy"><em>英文版封面（上面有页数)</em></p><p><img src="https://i.loli.net/2021/09/21/f9KjAeSN2lxFo8v.png" alt="Audits - Lighthouse" loading="lazy"><em>第十二章结束</em></p><p><img src="https://i.loli.net/2021/09/21/sDM8WhqIgx6QcKa.png" alt="Audits - Lighthouse" loading="lazy"><em>MIT课程讲义</em></p><h2 id="方法指导资料"><a class="markdownIt-Anchor" href="#方法指导资料"></a> 方法指导资料</h2><p><strong>这个部分主要介绍学习路线和学习方法，其实也是我探索的过程。内容很长，就当是唠嗑，不喜欢的可以直接跳过。</strong></p><blockquote><p>知乎有个问题叫<a href="https://www.zhihu.com/question/356351510">你的编程能力从什么时候开始突飞猛进？</a>，这个问题引发了程序员之间的广泛讨论，截止到现在，这个问题在知乎的浏览量已经超过了千万。</p></blockquote><p><img src="https://i.loli.net/2021/09/21/bHFTOq7MLnPI2Cx.png" alt="Audits - Lighthouse" loading="lazy"><em>你的编程能力从什么时候开始突飞猛进？</em></p><p>这里面有很多大佬分享了自己的经历经验。</p><p><img src="https://i.loli.net/2021/09/21/Rv2DlpAnw71gsTx.png" alt="Audits - Lighthouse" loading="lazy"><em>这个答主分析的鞭辟入里，拿出来让大家看看</em></p><p>相关的回答还有很多，大家没事可以去看看，学学别人的经验，应该对自己会有提升。</p><blockquote><p><strong>这里面一位答主<a href="https://www.zhihu.com/people/jie-bei-51">MutexLock</a>，一名华科的毕业生，目前在腾讯任职，分享了自己大学时间的学习经历，干货非常多，把自己大一到找工作之间学习过程写的十分详细。</strong></p></blockquote><p><img src="https://i.loli.net/2021/09/21/Z3hc4OKzQfdYvxr.png" alt="Audits - Lighthouse" loading="lazy"><em>里面写了学习的规划和实施</em></p><blockquote><p><strong>除此之外，答主还写了一篇完整的学习路线，内容同样的十分详细。</strong></p></blockquote><p><img src="https://i.loli.net/2021/09/21/Svh2GqAnKi5DPYN.png" alt="Audits - Lighthouse" loading="lazy"><em>学习方向，学习路线，学习方法都包含在了这篇里面</em></p><p>上面说是适合后端工程师，但我的感觉是<strong>适合所有CS（计算机科学）的学生</strong>，本身计算机科学涉猎广泛，可以说上面提到的所有内容计算机科学专业的同学都能接触到，但是广泛中也有要学好的基础，对于任何计算机专业的学生来说，编程，算法，这些都是最重要的。所以编程语言，数据结构，算法分析。这三门课也是一定要掌握好的。因此，相对于学校的那种广撒网的教育方式，我认为<strong>花更多的时间打磨这些才是重中之重，毕竟普通学校的绩点评分可打不过Github上的Star数目。判断一个人有才的标准不是成绩而是能力</strong>（仅限于普通学校，985，211那种没话说）。所以根据这个标准我做了上面的学习计划。</p><p>首先是编程语言的选择，这个可以说是很有争议的地方了，每年在各个论坛上都有人在争论那个语言好，那个占有率高，那个用起来最舒服。我个人认为语言没有好坏，现在的主流语言都有自己独特的使用场景，有些小众的语言在特定的方面也是无可替代的。但作为专业的学生，<strong>我认为先选择一门语言去系统学习，了解编程的思维，方法</strong>比对其他语言评头论足有益的多。</p><p>我的选择是<code>C++</code>，很多人觉得选择<code>C++</code>是十分不智的，这是一门十分“古老”的语言，分支十分多，用法混乱且复杂，最重要的是他十分难学。程序员间有个段子——没人敢在简历上写精通<code>C++</code>。但是这些缺点也是我选择C++的理由，我希望能在学完后掌握一定的抽象的思维，并将其运用到其他方面。而且我内心算是一个想要挑战自己的人，说白了就是想成功然后装逼。各种因素混合在一块，让我决定把入门的语言定成了<code>C++</code>（还是有一定的C的基础）</p><p>关于C++的学习方案，网上有很多的内容，我个人不喜欢这种重要的计算机科目通过网课学习，因为我觉得被动的学习效率很低，所以我更加倾向于<strong>主动的看书</strong>。这一点和上面大佬的学习方法很像，我也十分认同大佬的学习方法。</p><p><img src="https://i.loli.net/2021/09/21/GuQ4gq2k8JtRAbi.png" alt="Audits - Lighthouse" loading="lazy"><em>大佬的方法</em></p><p>所以我对<code>C++</code>的学习主要的方式就是看书，我选择的入门资料是英文版的<code>C++primer</code>，原因是电子版的英文版配合iPad强大功能，可以把单词方面的困难解决掉，同时英文原版也可以精进我的计算机英文，在以后看英文文章和在社区提问问题也十分方便。而看书的主要方式是在iPad上用marginnote3做笔记。笔记是我内化知识的一个很重要的部分，通过笔记将知识点记录下来，然后反复的查看，常看常新，直至把知识完全消化。而笔记之外，我打算用OneNote来实现笔记的整合，OneNote好处也很多，具体可以看我的这篇文章——，我设想的整合的结果是一个完整的资料库，当我要查看某个知识点时，可以快速的检索并找到相关的笔记，搜集的资料，以及与之相关其他知识的链接，这将是我学习计划里耗费最大的项目，也将是3个月后检测我成果的标准。</p><p>在学校C++的同时，数据结构不能落下，原因是他同样十分重要（<s>我不会告诉你是因为大一太混，大二没时间了所以只好含泪一起抓</s>），而同样的方法，再去看书的话时间上会十分紧张，而我准备的资料据说翻译贼烂，还找不到英文原版，所以这点我打算通过网课，也就是MIT来实现数据结构的学习。</p><blockquote><p>首先介绍一下什么是MIT，MIT就是麻省理工学院的缩写，这所大学有多强大家懂的都懂。MIT有一个公开课课程的网站，里面包含大量的MIT公开课，里面所有的资源均以免费的方式分享给世界上各地的人。这些公开课是经过老师的同意后放上的。质量十分高。知乎上有一篇介绍文章——<a href="https://zhuanlan.zhihu.com/p/112763953">替你总结一份MIT计算机课程</a>，放给大家看看。</p></blockquote><p><img src="https://i.loli.net/2021/09/21/LjthXop1O7T8D9v.png" alt="Audits - Lighthouse" loading="lazy"><em>MIT课程总结</em></p><p><img src="https://i.loli.net/2021/09/21/hbtrBPKxgjpwUdZ.png" alt="Audits - Lighthouse" loading="lazy"><em>MIT open courseware网站首页</em></p><p><img src="https://i.loli.net/2021/09/21/5dyTNjJmpL8kwvV.png" alt="Audits - Lighthouse" loading="lazy"><em>计算机科学学科列表</em></p><p>放给大家看看。</p><p>因为MIT没有专门的数据结构的课程，这个问题在刚才的知乎下也有人提出过。</p><p><img src="https://i.loli.net/2021/09/21/CPe4rhIWvwVBgLs.png" alt="Audits - Lighthouse" loading="lazy"><em>问题</em></p><p>答案也有人回答了，所以我选择的是6.006算法导论，相关资料在前面总结的有，这里就不多提了。总的来说，我打算按上面学习算法的方式学习数据结构，加上我买的两本书辅助的学习。当然，如果有可能，我打算在学完<code>C++</code>的基础后再开始数据结构的学习。这样更方便，但代价是时间把握上更加困难。</p><p>PS：说了这么多，提一些tip，这些都是我踩过的坑。</p><ol><li><p>不要沉迷知乎！</p></li><li><p>程序员不推荐使用百度</p></li><li><p>学会科学上网</p></li></ol><h2 id="失败的处罚措施"><a class="markdownIt-Anchor" href="#失败的处罚措施"></a> 失败的处罚措施</h2><blockquote><p>写了那么多，终于要到最正经的了。</p></blockquote><blockquote><p>没有处罚，那flag注定是摆设，所以要来点让人肉疼的。那么，开始吧！</p></blockquote><p>我决定：如果在我规定的时间内没有完成任务（C++  和数据结构的OneNote知识库），<strong>那么我会将自己每个月的生活费减少500（直到任务完成为止）并在评论区抽3个小伙伴没人100元</strong>（评论区留下联系方式，考虑到博客那贫瘠的浏览量，如果没人留的话就捐出去），届时我会把OneNote上传到云端，大家可以监督。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;上一篇&lt;a href=&quot;https://liuhd.com/2021/09/14/%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/&quot;&gt;关于未来的思考（碎碎念）&lt;/a&gt;，总结了不少的问题，也尝试提出过一些解决办法。但据我开始写上一篇，已经过去整整一周了。这一周的时间里，我给自己找了各种各样的理由，将这些我本来应该立即执行的任务搪塞了过去。（&lt;s&gt;有一说一，宅在家里真的挺爽&lt;/s&gt;），但这样下去我依然是个废物，没有任何改变。正好今天看b站时在热榜上看到了一个克服社恐的视频——&lt;a href=&quot;https://www.bilibili.com/video/BV1mh411p79S?from=search&amp;amp;seid=16274933938089722126&amp;amp;spm_id_from=333.337.0.0&quot;&gt;3句话，让你从社交恐惧→社交牛逼 | 奸商套路分享&lt;/a&gt;。对里面&lt;strong&gt;通过立flag来提高面对社恐的执行力&lt;/strong&gt;十分认同。正好我既废物又有社恐。于是就趁着这个发热冲动期立下一个未来学习的flag。并把它置顶，激励我的学习。也&lt;strong&gt;欢迎大家打脸&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;https://i.loli.net/2021/09/22/NQDbCqOYPeWhkB7.jpg&quot;&gt;</summary>
    
    
    
    <category term="flag" scheme="http://liuhd.com/categories/flag/"/>
    
    
  </entry>
  
  <entry>
    <title>关于未来的思考（碎碎念）</title>
    <link href="http://liuhd.com/2021/09/14/%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://liuhd.com/2021/09/14/%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</id>
    <published>2021-09-14T03:18:31.387Z</published>
    <updated>2021-09-23T03:34:54.143Z</updated>
    
    <content type="html"><![CDATA[<p>转眼已经大二，网课也上了一周了。如果用一个字来形容我现在的状态，就是“迷”。</p><p>总结来说，就是每天不知道自己在干什么，完全凭着喜好做事。</p><p>一天，b站刷到了神仙up主的ae合成，觉得自己要立马行动起来，于是打开ae，在1小时后崩溃离开。别人抱怨网盘速度馒，不安全，于是又想搭建nsa，发现价格太高直接劝退。看到别人搞黑苹果，就想自己搞一个，结果花了几个小时看视频才发现自己的电脑不符合条件。又想着装台式机可以，于是又花时间了解装机知识。</p><p>这样做确实是由着自己的性子来的，兴趣足。所以做起来虽然花费时间很多。但并不感觉到累。做这些的感受就跟暑假搭博客和学ae一样，虽然一直都比较累，但成功后的成就感是确确实实的，而且确实学到了东西。虽然学到的基本上是皮毛，作为兴趣确实也学到了东西。比一直打游戏强一点。但这些都只是兴趣，应该是自己没事的时候玩玩。因为还有更重要的专业课。所以问题就变成了，我是要学好专业课还是随着自己的兴趣来？</p><span id="more"></span><p>对大多数人来说，专业基本上是以后的饭碗，不学好，饭都没的吃，还谈什么兴趣。</p><p>我的想法却是——是不是可以一起抓？于是:</p><p>看了公众号文章，觉得听力一定要提高，就对着新闻刷了四五个小时。</p><p>看到空间同学大佬又设计出了这样那样的代码，晒自己的学习成果，觉得再不学cs就跟不上别人的步伐。于是抱着C++primer啃了几天。</p><p>显然，我高估了自己的能力。</p><p>专业课对我来说无疑是枯燥无味的，大部头的书看起来十分无趣，而且又臭又长。加之在家上网课，还有很多任务要去做，而且在家的学习效率也确实不高，所以就有出现了那种兴趣使然的现象。然后陷入焦虑怪圈。</p><p>这样下去肯定不行的，所以我决定做出一些改变。在此之前先找出自己的优势和劣势。</p><p>优势</p><ul><li>其实我是可以看得下去那些大部头的，因为我发现C++primer英文版配上ipad强大的软件支持，居然可以看的比较有趣。这个有趣是建立在本身计算机英语不是特别困难，最重要的是ipad ，手机，电脑三者可以靠MN3和anki连接成一个学习闭环，我对这件事很有兴趣，但是也就是局限于有兴趣而已，不会像前面说的那么孜孜不倦的学习，反而会被偶然接触到的东西吸引，然后荒废学业的现象。</li><li>我有强大的搜索支持：我并不缺少学习的资源。网课。书，适合现阶段学习的电脑，ipad，各种学习工具。我的资源很多，设备也很给力。完全适合我大学的学习。</li></ul><p>劣势</p><ul><li>我不再像高中和初中时那般有耐心：对于一些困难的东西，我总会潜意识决定要放在明天做。比如今天我要看C++primer，本来的计划是看两个小时，但是看到一个半小时的时候遇到了一个难点，不是很好理解，加之已经看了一个半小时了，就会想着休息一下，这短暂的放松让我重新面对这些问题时更加觉得困难。于是心里想着等明天再看，这个明天再看的心理是来源于自己潜意识里认为明天没有今天学那么多的东西，精力更加充沛，思维会更加活跃，而事实上，明天的我也未必会比今天更高效，状况非常多，可能今天熬夜看剧，明天会更累，或者明天早上起来肚子不舒服，或者因为一些小事和父母或者同学生闷气，这些都会影响我学习的效率。而且要命的是这些小的感受和情绪在学习的过程中会被放的很大，以至于我会带着烦躁的情绪去学习，效率更低。不但完不成自己定下的目标，而且看着拉下的越来越多，就越来越提不起精神去学习。再次回到最开始的状态。</li><li>我的生活习惯十分不规律，主要是指作息时间。我知道好的作息会更加高效的工作。但一天的压力要在晚上释放，我不会打游戏，所以压力的释放方式大多是看看视频，看看剧，但感觉这些东西似乎并不能给我带来短期内更大的刺激，于是我会在这上面花很长时间，晚上看油管，刷b站能占用我生活的大部分。加上学校的打卡政策，像是给了我一个熬夜的理由，现在，凌晨打卡已经成为常态。随之而来的是早八课起不来，头昏，精神无法集中的现象。而想要改变是困难的，想要早睡会睡不着，而且本身这种坏习惯已经成型，即使一天好了，还会反复的来。</li><li>我不太善于与别人沟通，从童年开始，我就是一个怕生的人，害怕与别人交流，除了特别要好的朋友，我和别人几乎没有任何交流，这个交流断的很彻底，我在高中时期几乎没碰过qq，记得高一玩的要好的朋友，甚至到现在连联系方式都没有，高二分班后就没有再联系，现在估计都形同陌路了。有的朋友，学校里交流很多，一起嬉戏玩闹，分开后虽有联系方式，但脱离了班级的载体，我根本不知道要和他们聊些什么，以至于一年到头说不了几句话。不知道那些同学心里会怎么想我，大概是叹息和嘲笑吧！同时，我又是一个自尊心比较强的人，很害怕别人怎么议论我，害怕我身上的缺点被别人发现，害怕他们在背后嘲笑我，这样让我变得更加封闭，这样讳疾忌医，结果就变成了现在这样。带来的影响也很大，我不抗压，受到批评最先想到的是哭。不和别人交流，沉浸在自己的世界，没了来自别人的建议和关心，走了不少弯路，花了不少冤枉钱，交了很多智商税，甚至还养成了孤高自傲（贬义）的性格，总是认为自己的一切都是对的，也越发听不得别人的建议。</li><li>我的底子不深。看似每天忙这忙那，涉猎广泛，但真的只是每样都只懂一点点（纯事实，非谦虚），我的编程仍然像小孩子过家家一样，专业课也很拉跨。跟身边的大佬根本不在一个层次。</li></ul><p>写了那么多，是时候找找解决办法了。</p><p>。首先就是抓住重点学习。我把现阶段的重点放在C<ins>的学习上，目标是通过C</ins>深入了解编程语言，在大一学到的两门编程语言C和Python都没有认真。只是了解最基础的知识。基本上还是小白一个。所以C++要深入的学习。最起码的要求是把所有专业书籍看完，加上刷题。然后是英语</p><p>指导方案就是发展优势，提升劣势。</p><ul><li><p>明确学习目标。有一个明确的学习规划。现阶段学习效率不高的原因，总结为以下几点：</p><ul><li>没有明确的学习计划。老是想着一块抓，忽略自己的能力有限，多开根本吃不消。</li><li>缺少一套合理的规划。尝试过todo，以时间作为标准很难把握，有时候要理解一个知识点学要花费很长时间，这样就会出现文章开头描述的那种状态。同时消减学习的信心，</li><li>规划的可执行性不高。按照一些公众号文章，博主口中的说法，那英语和编程举例，首先是英语，soren老师的方法十分全面，听说读写译面面俱到，但是每一个执行起来的时间十分感人。但是精听，每天就能花费几个小时。这样做是以时间换成绩，对于英语专业的学生十分可行，但是对于计算机的学生简直要命。不仅时间长，而且枯燥无味、所以要兼顾编程和英语，这样做就是十分低效的。</li></ul></li><li><p>改变生活习惯</p><p>这个最主要是作息，这个是必须强制执行的。除特别紧急的问题。</p><ul><li>睡觉时间，安排在晚上的十一点，上学后再调整，</li><li>起床时间。定在早上的7点，意思是早上7点必须起来。</li><li>必须要娱乐时间。打游戏和看视频</li><li>打造舒适的生活学习环境</li><li>淡化无用的兴趣点，避开所有学习博主的安利</li><li>每天锻炼30分钟</li></ul></li><li><p>拓展交流圈子</p><ul><li>利用好自己手头上的交流方式。在群里发言。空间，朋友圈，电报群。</li><li>在论坛提问，讨论问题，知乎，和Stack Overflow</li><li>多加好友，多去主动交流，不能怕尬和冷场</li></ul></li><li><p>利用好自己的学习工具</p><ul><li>学习应该以iPad和window为主力，这部分主要时输入和输出，就是加工知识和输出内容，手机主要背诵和熟悉知识。找到自己最合适的学习模式。这个模式是建立在iPad和Windows软件的生态上的。</li><li>找到最适合自己的软件。目前来说我接触的软件已经完全可以实现自己全部的学习。所以拒绝接触新软件，把现有的软件细化，挑选出最适合的。找到每个软件的定位和方法。把它们总结归纳到自己的博客上。</li><li>搜素工具和求助方法</li></ul></li></ul><p>下面是系统的方法探究和全面的规划。</p><ul><li><p>学习目标上</p><p>这个分成学校的应试要求和自己的自学，这里以自学为主。</p><ul><li><p>自学</p><ul><li>C++</li><li>学习资料：《C++primer》</li><li>学习方法：看书，搜素，记笔记</li><li>软件：浏览器，MN3，OneNote，Anki</li><li>学习目标：3个月内学完</li></ul></li><li><p>应试</p><p>科目上的所有考试课</p><ul><li>网课挂着，作业能抄就抄，能水就水。</li><li>平时刷书，找到教材，花点时间看书，课后习题做做、</li><li>学习目标：数据结构，电子技术基础，汇编语言，心理学。</li><li>学习建议：找到兴趣点，看书抓住重点，找个时间集中看</li></ul></li></ul></li><li><p>软件使用上</p><ul><li><p>笔记软件</p><ul><li><p>OneNote</p><ul><li><p>优势</p><p>无限的画布，拓展性极高，可以使用合并图表法对知识进行系统的处理，插入视频，文件的功能十分强大</p></li><li><p>用途</p><p>适合对书上的知识做系统的总结，对书本外搜索到的视频文章插入整理</p></li><li><p>使用方法</p></li></ul></li><li><p>goodnote|notebality</p><ul><li><p>优势</p><p>手写笔记的福音，强大的书写体验，配合apple pencil直接王炸，代替纸质笔记本的最好帮手</p></li><li><p>用途</p><p>课堂上整理老师讲课，搜索时记录灵感</p></li><li><p>使用方法</p></li></ul></li><li><p>typora</p><ul><li><p>优势</p><p>最舒服的Markdown编辑器，实时预览的美感，所见即所得。我愿称之为地表最强！</p></li><li><p>用途</p><p>书写文章，做内容输出</p></li><li><p>使用方法</p></li></ul></li></ul></li><li><p>思维导图</p><ul><li><p>xmind</p><ul><li><p>优势</p><p>思维导图的优势不必多言，清晰明了。</p></li><li><p>用途</p><p>学习整本书后对主题进行梳理，不准备做主力使用</p></li><li><p>使用方法</p></li></ul></li></ul></li><li><p>学习内化软件</p><ul><li><p>Marginnote3</p><ul><li><p>优势</p><p>完美的学习软件，对知识拆解与消化达到了登峰造极的地步。强到不可思议！再重复一遍，苹果是神！marginnote是神!</p></li><li><p>用途</p><p>对所有书本的内化拆解，做思维导图，找知识点架构。复习卡片。</p></li><li><p>使用方法</p></li></ul></li></ul></li><li><p>搜索软件</p><ul><li><p>chorme</p><ul><li><p>优势</p><p>在搜索领域方面，谷歌是永远的爹！单从搜索引擎来说，谷歌做的无疑是最好的。</p></li><li><p>用途</p><p>有困难，找谷歌。所有问题去谷歌上找。</p></li><li><p>使用方法</p></li></ul></li></ul></li><li><p>讨论社区</p><ul><li><p>知乎|quora</p><ul><li><p>优势</p><p>很好的交流社区</p></li><li><p>用途</p><p>做讨论平台</p></li><li><p>使用方法</p></li></ul></li><li><p>Stack Overflow</p><ul><li><p>优势</p><p>程序员必用社区，你的所有问题都在这上面找的到</p></li><li><p>用途</p><p>谷歌不行的时候来这找</p></li><li><p>使用方法</p></li></ul></li></ul></li><li><p>复习软件</p><ul><li><p>anki</p><ul><li><p>优势</p><p>艾宾浩斯遗忘曲线的应用，卡片的形式，正反面的展示方法，anki就是复习记忆领域无可匹敌的存在。</p></li><li><p>用途</p><p>学习后知识点的记忆</p></li><li><p>使用方法</p></li></ul></li></ul></li></ul></li><li><p>学习方法上</p><p>这些软件每一个拉出来都是一个打十个的存在，把它们整合起来，打造学习闭环，才能使学习更加高效。下面以C++的具体学习为例展示如何打造学习闭环。</p><ul><li><p>科目：C++</p></li><li><p>资料：《C++primer》</p></li><li><p>过程</p><p>拿到C++ primer的电子书（英文版），放到MN3上去，使用MN先对内容进行批注，对不认识的单词，用黄色标注，然后通过欧陆词典查词，这个过程是连续的，这是基于苹果的分屏和MN，欧陆三者的交互实现的。然后把做好的这些标注卡片放到复习卡片组，导入到anki中，在借由ipad上的anki同步到手机中的anki上，完成对C++ primer上生词的复习。</p><p>同样的方法，可以对书中的重点，术语进行批注，然后通过学习模式做成连续的思维导图，对要识记的知识点做成复习卡片，同样的方法导入anki，在手机上复习。形成完整的学习闭环。在学习过程中，无疑会有很多不理解的地方，这些东西拿到chorme，用google搜索，找答案。找到的文章通过OneNote进行剪藏。在OneNote上进行简单的批注。学习完一定的章节后，通过MN的思维导图对章节做总结，然后导出到OneNote上，再将之前剪裁的内容通过超链接的方式插入链接到思维导图上，在使用表格合并法做知识的梳理总结。学完一本书之后同样如此。</p><p>最后到了知识的输出阶段，这个阶段分为两个方面，第一个就是知识的整理分析上，有的时候，网上中找到的答案只有一部分，或者需要做进一步的提炼总结，而又不想破坏剪藏好的文章，因为这些文章的其他部分未来也可能用的到，这时候就会用到学习的输出工具–typora，通过他来将自己通过各种途径获得的知识做进一步的总结提炼，归纳整理。然后在导入到OneNote中，以文件附件的形式链接到到整理的思维导图上。另一个方面，当需要自己写技术文章时同样使用他做笔记，上传到博客上。</p></li></ul></li><li><p>具体的学习计划</p><ul><li>按照上面的方法学习，目标是在3个月内完成C++prime的学习，通过上述软件做笔记时。标注好完成的日期和时间，知识点的出处，还要对知识点的所有总结的链接。力求一个知识点能找到出处，相关内容和所处体系。这些东西明天探索出来。</li><li>上述内容完成程度要求十分高，目的是做成一个学习库。这是十分有意义的事情。所以花费的时间不必在意。干就完了。</li></ul></li><li><p>建立健康的生活习惯</p><ul><li><p>作息时间：休息时间是11点，起床时间定在7点，睡不着的情况通过听听力解决。这个方法很有效。</p></li><li><p>舒适的学习环境、</p><p>这个重点说一下，首先，整理书桌。以少即是多为原则。桌子上摆放的只有电脑，平板。键盘。还有鼠标和一个杯子。其余物品放在抽屉里。床的位置稍向后移。给腿留下更多的伸展空间。板凳挑的调到适当位置。</p><p>然后是整理床铺。</p></li><li><p>每天一定的娱乐时间</p></li></ul><p>不积攒压力，找到一个合适的发泄口。能带来短时刺激的在我看来只有游戏，但游戏又有成瘾性的问题。那么退而求其次，用美剧和动画的方式排解压力。注意，这个娱乐是自己一定要受到刺激。也就是说，不要想着看纯英文。有中文字幕看中文，没有找资源。在没有其他事情时可以听音乐。偶尔心血来潮可以打打游戏。但频率不能太高。</p><ul><li>坚持锻练</li></ul><p>每天keep 30min，这点很方便，直接在家就可以做</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;转眼已经大二，网课也上了一周了。如果用一个字来形容我现在的状态，就是“迷”。&lt;/p&gt;
&lt;p&gt;总结来说，就是每天不知道自己在干什么，完全凭着喜好做事。&lt;/p&gt;
&lt;p&gt;一天，b站刷到了神仙up主的ae合成，觉得自己要立马行动起来，于是打开ae，在1小时后崩溃离开。别人抱怨网盘速度馒，不安全，于是又想搭建nsa，发现价格太高直接劝退。看到别人搞黑苹果，就想自己搞一个，结果花了几个小时看视频才发现自己的电脑不符合条件。又想着装台式机可以，于是又花时间了解装机知识。&lt;/p&gt;
&lt;p&gt;这样做确实是由着自己的性子来的，兴趣足。所以做起来虽然花费时间很多。但并不感觉到累。做这些的感受就跟暑假搭博客和学ae一样，虽然一直都比较累，但成功后的成就感是确确实实的，而且确实学到了东西。虽然学到的基本上是皮毛，作为兴趣确实也学到了东西。比一直打游戏强一点。但这些都只是兴趣，应该是自己没事的时候玩玩。因为还有更重要的专业课。所以问题就变成了，我是要学好专业课还是随着自己的兴趣来？&lt;/p&gt;</summary>
    
    
    
    <category term="碎碎念" scheme="http://liuhd.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>21年暑假阶段总结</title>
    <link href="http://liuhd.com/2021/09/13/%E6%80%BB%E7%BB%93%E8%B4%B4/"/>
    <id>http://liuhd.com/2021/09/13/%E6%80%BB%E7%BB%93%E8%B4%B4/</id>
    <published>2021-09-13T02:55:52.918Z</published>
    <updated>2021-09-01T06:38:59.605Z</updated>
    
    <content type="html"><![CDATA[<p>暑假即将过去，说一说自己的假期感受。<br>总结来说，挺充实的。<br>干了很多自己想干的事。</p><h2 id="搭博客"><a class="markdownIt-Anchor" href="#搭博客"></a> 搭博客</h2><p>先是搭博客，去外国平台买了域名，跟着网上的教程一步一步来，不会的就去学，出问题就去搜。</p><p>必须承认，这个过程并不惬意，甚至十分折磨人。</p><p>我记得为了学git，去b站看了一个星期的教程，写了7000字的笔记；</p><p>我记得为了解决一个问题，大半夜不睡觉去和开发者联系；</p><p>我记得搭建完成后为了加上一个插件结果结构崩溃只好推到重来的崩溃；</p><p>这是一个及其无聊且折磨人的过程。但幸好 ，结果还算尽如人意，我有了自己的一方天地 。在这个空间里，畅所欲言，无忧无虑。我学到了不少知识，从版本控制到markdown再到命令行，HTML语法。我认识到了不少的朋友，有同专业的，还有已经进了大厂工作的，甚至还有自己创业的巨佬。他们有的教会了我技术 ，有的指导我前进，这些都是我收获的。</p><span id="more"></span><h2 id="视频制作"><a class="markdownIt-Anchor" href="#视频制作"></a> 视频制作</h2><p>再往后，我接触视频剪辑。开始学着做mad，先学了pr，后来为了做动画又去学了ae  ai，然后开始制作，过程一如既往的让人不舒服，为了找素材，扒变了不少网站 ，2倍速看了不知道多少部番，还记得高三那年寒假上网课想着要是能不学习一只看番该多快乐，结果现在梦想成真，发现确实很快乐。为了做效果，天天坐在电脑旁边跟着教程肝。记得视频开头那个片头 看着简单，只有5秒，做了快一个小时。还有复刻的视频，肝了一周，到现在还没做完（哭）当然了、过程虽然痛苦，但结果确实是令人满意的，学会了pr ae的基本操作 ，做出了满意的效果，完成了自己第一个自制视频。最重要的是 ，享受了创造的乐趣。这种快乐确实是无与伦比的。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>当然，还是有遗憾的，我在搭完博客，给自己做自我介绍的时候，列了四个暑假目标，包括拿驾照，学编程，学英语，练盲打。结果驾照疫情不让练，只过了科目一，编程书放在桌子上，一直吃灰。英语花200块钱报班，最后却没跟上（不过好在全是文字版，可以反复看）唯一学会的也就是还不是特别熟练的盲打了。从刚开始的想法来看，这个暑假无疑是失败的，但换个角度看，上面列举的学编程，学英语，这些都是需要长时间的积累的，不是做了就会立马出效果的，而暑假在家，本身对这些并无兴趣 ，强撑着去学反而并不快乐，甚至会适得其反。倒不如去做一些感兴趣的事。这样保证了时间的最高效利用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;暑假即将过去，说一说自己的假期感受。&lt;br&gt;
总结来说，挺充实的。&lt;br&gt;
干了很多自己想干的事。&lt;/p&gt;
&lt;h2 id=&quot;搭博客&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#搭博客&quot;&gt;&lt;/a&gt; 搭博客&lt;/h2&gt;
&lt;p&gt;先是搭博客，去外国平台买了域名，跟着网上的教程一步一步来，不会的就去学，出问题就去搜。&lt;/p&gt;
&lt;p&gt;必须承认，这个过程并不惬意，甚至十分折磨人。&lt;/p&gt;
&lt;p&gt;我记得为了学git，去b站看了一个星期的教程，写了7000字的笔记；&lt;/p&gt;
&lt;p&gt;我记得为了解决一个问题，大半夜不睡觉去和开发者联系；&lt;/p&gt;
&lt;p&gt;我记得搭建完成后为了加上一个插件结果结构崩溃只好推到重来的崩溃；&lt;/p&gt;
&lt;p&gt;这是一个及其无聊且折磨人的过程。但幸好 ，结果还算尽如人意，我有了自己的一方天地 。在这个空间里，畅所欲言，无忧无虑。我学到了不少知识，从版本控制到markdown再到命令行，HTML语法。我认识到了不少的朋友，有同专业的，还有已经进了大厂工作的，甚至还有自己创业的巨佬。他们有的教会了我技术 ，有的指导我前进，这些都是我收获的。&lt;/p&gt;</summary>
    
    
    
    <category term="总结" scheme="http://liuhd.com/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="假期总结" scheme="http://liuhd.com/tags/%E5%81%87%E6%9C%9F%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记</title>
    <link href="http://liuhd.com/2021/09/13/%E5%BF%83%E7%90%86%E5%AD%A6%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E5%AF%BC%E8%AF%BB/"/>
    <id>http://liuhd.com/2021/09/13/%E5%BF%83%E7%90%86%E5%AD%A6%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E5%AF%BC%E8%AF%BB/</id>
    <published>2021-09-13T02:55:52.917Z</published>
    <updated>2021-09-27T15:16:23.275Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>读书是我一直以来的憧憬，但每当我去做时却阻力重重。我以忙其他事情做借口，为自己的怠懒找理由。浪费掉了大多数可以读书的时间。所以借着立flag的机会，我决定开始我搁置了很久很久的读书计划。</p><img src="https://i.loli.net/2021/09/22/7tEalCkdIPBNp13.jpg" loading="lazy"><span id="more"></span><h2 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h2><ul><li>这篇读书列表是趁着立flag时写下的，也想借此求证一下——真正阻碍我读书的真的是快节奏紧张的学习生活吗？</li><li>读书笔记的形式多种多样，完全照着自己的感觉来的</li></ul><h2 id="书单"><a class="markdownIt-Anchor" href="#书单"></a> 书单</h2><p>开始正式的书单前，先熬点鸡汤。推荐观看<a href="https://space.bilibili.com/517327498?spm_id_from=333.788.b_765f7570696e666f.1">罗翔</a>老师的<a href="https://www.bilibili.com/video/BV1BK411L7DJ?spm_id_from=333.999.0.0">我们为什么要读书？</a>。</p><p><strong>读书是与伟大的灵魂对话！</strong></p><p>下面开始我的书单</p><h3 id="工具书"><a class="markdownIt-Anchor" href="#工具书"></a> 工具书</h3><p>PS：这里准备了一些用的到的工具书，注意第一本！</p><table><thead><tr><th>书名（包含地址）</th><th>日期记录</th></tr></thead><tbody><tr><td><a href="https://1drv.ms/u/s!Am5BePtqKSxkhV841nmCua_JhWlF">如何阅读一本书</a>（OneNote地址，有时可能不稳定，需要fq）</td><td>21-5-13</td></tr></tbody></table><h3 id="心理学"><a class="markdownIt-Anchor" href="#心理学"></a> 心理学</h3><p>PS：这是我非常感兴趣的一个话题，书单选择的是@刘未鹏在豆瓣上的书单，名字叫做<a href="https://www.douban.com/doulist/46003/?start=0&amp;sort=time&amp;playable=0&amp;sub_type=">思维改变生活</a>，以表格的形式列出</p><table><thead><tr><th>书名（包含博客地址）</th><th>日期记录</th></tr></thead><tbody><tr><td><a href="https://liuhd.com/2021/09/13/20%E4%B8%96%E7%BA%AA%E6%9C%80%E4%BC%9F%E5%A4%A7%E7%9A%84%E5%BF%83%E7%90%86%E5%AD%A6%E5%AE%9E%E9%AA%8C/">20世纪最伟大的心理学实验</a></td><td>21-8-09  ~</td></tr><tr><td>社会心理学</td><td></td></tr><tr><td>影响力</td><td></td></tr><tr><td>判断与决策</td><td></td></tr><tr><td>改变心理学的四十项研究</td><td></td></tr></tbody></table><h3 id="小说"><a class="markdownIt-Anchor" href="#小说"></a> 小说</h3><p>PS：这个部分没有具体的分类，看到哪里写哪里。</p><table><thead><tr><th>书名</th><th>日期记录</th></tr></thead><tbody><tr><td><a href="https://liuhd.com/2021/09/22/%E6%9D%80%E6%AD%BB%E4%B8%80%E5%8F%AA%E7%9F%A5%E6%9B%B4%E9%B8%9F/">杀死一直知更鸟</a></td><td>21-5-22  ~21-5-24</td></tr><tr><td>人间失格</td><td>21-9-25 ~21-9-27</td></tr><tr><td>房思琪的初恋乐园</td><td></td></tr></tbody></table><h3 id="传记"><a class="markdownIt-Anchor" href="#传记"></a> 传记</h3><p>PS：读别人的故事，塑自己的人生</p><table><thead><tr><th>书名</th><th>日期记录</th></tr></thead><tbody><tr><td>乔布斯传</td><td></td></tr></tbody></table><h3 id="哲学"><a class="markdownIt-Anchor" href="#哲学"></a> 哲学</h3><table><thead><tr><th>书名</th><th>日期记录</th></tr></thead><tbody><tr><td>理想国</td><td></td></tr></tbody></table><h2 id="读书进度"><a class="markdownIt-Anchor" href="#读书进度"></a> 读书进度</h2><ul><li>21-9-24<ul><li>写下这个书单列表，填上一些读过的书</li><li>心理学伟大实验：第一章读完</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;读书是我一直以来的憧憬，但每当我去做时却阻力重重。我以忙其他事情做借口，为自己的怠懒找理由。浪费掉了大多数可以读书的时间。所以借着立flag的机会，我决定开始我搁置了很久很久的读书计划。&lt;/p&gt;
&lt;img src=&quot;https://i.loli.net/2021/09/22/7tEalCkdIPBNp13.jpg&quot;&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="http://liuhd.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="http://liuhd.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="http://liuhd.com/2021/09/13/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://liuhd.com/2021/09/13/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-13T02:55:52.899Z</published>
    <updated>2021-07-22T03:13:24.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>这是我第一次发博客的学习文章，这个文章是我在学习git时做的笔记，为了弄懂我配了大量的图片，看完之后应该对git，github，版本控制都有一定的了解。当然这不是所谓的技术文章（事实上我现在也没能力去写技术文章），仅仅是把我的学习记录下来。文章是参考廖雪峰老师的git教程，和尚硅谷的git视频来写的。大家如果要学习的话建议去看看。</p><span id="more"></span><h2 id="git简介"><a class="markdownIt-Anchor" href="#git简介"></a> git简介</h2><h3 id="版本控制"><a class="markdownIt-Anchor" href="#版本控制"></a> 版本控制</h3><blockquote><p>什么是版本控制系统？</p><p>如果你用Microsoft Word写过长篇大论，那你一定有这样的经历：</p><p>想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去，最后你的Word文档变成了这样：</p><img src="https://i.loli.net/2021/07/21/pRkcDQsnYG82bv5.jpg" loading="lazy"><p>过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找，真麻烦。</p><p>看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删，真郁闷。</p><p>更要命的是，有些部分需要你的财务同事帮助填写，于是你把文件Copy到U盘里给她（也可能通过Email发送一份给她），然后，你继续修改Word文件。一天后，同事再把Word文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，得把你的改动和她的部分合并，真困难。</p><p>于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？</p><p>这个软件用起来就应该像这个样子，能记录每次文件的改动：</p><table><thead><tr><th style="text-align:left">版本</th><th style="text-align:left">文件名</th><th style="text-align:left">用户</th><th style="text-align:left">说明</th><th style="text-align:left">日期</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">service.doc</td><td style="text-align:left">张三</td><td style="text-align:left">删除了软件服务条款5</td><td style="text-align:left">7/12 10:38</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">service.doc</td><td style="text-align:left">张三</td><td style="text-align:left">增加了License人数限制</td><td style="text-align:left">7/12 18:09</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">service.doc</td><td style="text-align:left">李四</td><td style="text-align:left">财务部门调整了合同金额</td><td style="text-align:left">7/13 9:51</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">service.doc</td><td style="text-align:left">张三</td><td style="text-align:left">延长了免费升级周期</td><td style="text-align:left">7/14 15:17</td></tr></tbody></table><p>这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪</p></blockquote><h3 id="git概述"><a class="markdownIt-Anchor" href="#git概述"></a> git概述</h3><p>git就是一个典型的版本控制工具。</p><p>它具有以下的作用：</p><ol><li>协同修改<ul><li>实现多人并行不悖的修改服务器端的同一个文件。</li></ul></li><li>数据备份<ul><li>git不仅能够保存目录和文件的当前状态，还能够保存每一个提交后的历史状态。</li></ul></li><li>版本管理<ul><li>git采用文件系统快照的形式，实现在保存每一个版本的文件信息时不保留重复数据，可以节约存储空间，提高运行效率。</li></ul></li><li>权限控制<ul><li>对团队中的开发人员进行权限控制。</li><li>对团队外开发者贡献的代码进行审核。</li></ul></li><li>历史记录<ul><li>查看修改人，修改时间，修改内容，日志信息</li><li>将本地文件恢复到某一个历史状态。</li></ul></li><li>分支管理<ul><li>允许开发团队在工作过程中多条生产线同时推进任务，进一步提高效率。</li></ul></li></ol><h3 id="git优势"><a class="markdownIt-Anchor" href="#git优势"></a> git优势</h3><ul><li>大部分操作都在本地完成，无需联网</li><li>能够保证版本信息的完整性（哈希操作）</li><li>尽可能的添加数据而不是删除或者修改（契合版本控制）</li><li>分支操作快捷流畅</li><li>与linux系统全面兼容</li></ul><h3 id="git安装"><a class="markdownIt-Anchor" href="#git安装"></a> git安装</h3><p>具体的安装教程可以参考<a href="https://git-scm.com/doc">git官方文档</a>，有问题就去谷歌搜索一下（有困难找谷歌（斜眼笑））</p><h3 id="git结构"><a class="markdownIt-Anchor" href="#git结构"></a> git结构</h3><img src="https://i.loli.net/2021/07/21/dFVSowqgktvM7OT.png" loading="lazy"><h3 id="git和代码托管中心"><a class="markdownIt-Anchor" href="#git和代码托管中心"></a> git和代码托管中心</h3><p>作用：用来维护远程库</p><ul><li>局域网环境下<ul><li>Gitlab服务器</li></ul></li><li>外网环境下<ul><li>GitHub</li><li>码云</li></ul></li></ul><h3 id="本地库和远程库"><a class="markdownIt-Anchor" href="#本地库和远程库"></a> 本地库和远程库</h3><p><strong>团队协作</strong></p><p>、<img src="/.com//zEM17gv2xkDRHAJ.png" loading="lazy"></p><p>**工作原理：**项目创建人将自己的本地库<code>push</code>到代码托管中心（远程库），任何人（有权限访问）可以将远程库<code>clone</code>到自己的本地库中，然后进行操作，但个人的修改不能直接上传到远程库，需要加入团队。然后将自己修改后的本地库<code>push</code>到远程库（由于使用git，会保留所有版本的记录），然后小组的其他成员将远程库<code>pull</code>回自己的本地库。从而实现团队之间的协同开发。</p><p><strong>跨团队协作</strong></p><img src="https://i.loli.net/2021/07/21/N29w6ZXtY3aPkSm.png" loading="lazy"><p>**工作原理：**对于团队外的成员，如果也想去参与团队的开发，可以<code>fork</code>该团队的远程库，将这个远程库传到自己的远程库中，再通过<code>clone</code>将远程库下载到本地库中，然后进行开发，再通过<code>push</code>将自己本地库<code>push</code>到自己的远程库中。然后向项目开发团队发送一个<code>push resquet</code>经由开发团队审核后可以传向开发团队的远程库，然后开发团队中的成员再<code>pull</code>到自己的本地库。</p><h2 id="git的命令行操作"><a class="markdownIt-Anchor" href="#git的命令行操作"></a> git的命令行操作</h2><h3 id="本地库操作"><a class="markdownIt-Anchor" href="#本地库操作"></a> 本地库操作</h3><h4 id="本地库的初始化"><a class="markdownIt-Anchor" href="#本地库的初始化"></a> 本地库的初始化</h4><ul><li>命令：git init</li><li>操作：在Windows上任何一个窗口打开右键，选择Git Bash Here，即可打开命令行，使用git操作，也可使用linux操作。(<a href="https://app.yinxiang.com/shard/s22/nl/31392663/d8e60561-26ee-4794-b145-16428507c8e2">常见的linux命令</a>)找到文件后输入命令git init 对创建的文件进行初始化（效果就是创造一个.git的目录）</li><li><img src="https://i.loli.net/2021/07/21/9Ji6EPIuyA7dRfO.png" loading="lazy"></li><li>注意：.git目录中存放的是本地库相关的子目录和文件，不要删除，也不要随意的修改。</li></ul><h4 id="设置签名"><a class="markdownIt-Anchor" href="#设置签名"></a> 设置签名</h4><ul><li><p>形式</p><p>用户名：tom</p><p>Email地址：goodmoring@tom.com作用：标识不同开发人员的身份</p><p>辨析：这里设置的签名和远程库登录账号没有任何关系</p><ul><li>作用：标识不同开发人员的身份</li><li>辨析：这里设置的签名和远程库登录账号没有任何关系</li><li>命令<ul><li>项目级别/仓库级别：尽在当前本地库范围内有效<ul><li>git config <a href="http://user.name">user.name</a> tom_pro</li><li>git config user.email <a href="mailto:goodMoring_pro@tom.com">goodMoring_pro@tom.com</a></li><li><img src="https://i.loli.net/2021/07/21/RaTXGsDwzqr92FP.png" loading="lazy"></li></ul></li><li>系统用户级别：登陆当前操作系统的用户范围（整个电脑）<ul><li>git config --global <a href="http://user.name">user.name</a> tom_glb</li><li>git config --global  user.email <a href="mailto:goodMoring_pro@tom.com">goodMoring_pro@tom.com</a></li><li>信息保存位置：.git/config文件</li><li><img src="https://i.loli.net/2021/07/21/ZdlJY7AbyRKjhNa.png" loading="lazy"></li></ul></li><li>级别优先级<ul><li>就近原则：项目级别优先与系统用户级别，二者都有时采用项目级别的签名</li><li>如果只有系统用户级别的签名，就以系统用户级别的签名为准</li><li>二者都没有不允许</li></ul></li></ul></li></ul></li></ul><h4 id="添加提交以及查看状态操作"><a class="markdownIt-Anchor" href="#添加提交以及查看状态操作"></a> 添加提交以及查看状态操作</h4><h5 id="状态查看查看暂存区的状态"><a class="markdownIt-Anchor" href="#状态查看查看暂存区的状态"></a> <strong>状态查看</strong>（查看暂存区的状态）</h5><p><strong>命令</strong> : <code>git status</code></p><p><strong>效果</strong>：</p><p>在git gash 中输入命令<code>git status</code>按下回车，执行效果如下</p><img src="https://i.loli.net/2021/07/21/CWzRGrIwtxhc9LM.jpg" loading="lazy"><p>使用vim 编辑器来创建一个good.txt)<img src="/.com//CWzRGrIwtxhc9LM.jpg" loading="lazy"></p><p>再次查看状态，显示有文件但未追踪，（鲜明的红色）</p><img src="/.com//eoA6Uzvf9LlWHbG.jpg" loading="lazy"><img src="https://i.loli.net/2021/07/21/1B7wsDg3WnxvSjQ.png" loading="lazy"><h5 id="提交到暂存区"><a class="markdownIt-Anchor" href="#提交到暂存区"></a> <strong>提交到暂存区</strong></h5><p><strong>命令</strong>：<code>git add</code></p><p>使用git add命令将good.txt文件提交到暂存区</p><img src="/.com//eoA6Uzvf9LlWHbG.jpg" loading="lazy"><img src="https://i.loli.net/2021/07/21/1B7wsDg3WnxvSjQ.png" loading="lazy"><p>再次查看状态：</p><img src="/.com//gV1baJn6dUs75up.jpg" loading="lazy"><img src="https://i.loli.net/2021/07/21/yuBgsT2iZDO4UvS.png" loading="lazy"><p>提示 已经将文件提交到了暂存区（一抹舒服的绿色），同时提示可以用<code>git rm --cached &lt;file&gt;</code>这个命令将文件从暂存区中移除，效果如下</p><img src="https://i.loli.net/2021/07/21/GSzrAXw82yq3tWV.png" loading="lazy"><p>再次查看状态可以发现又回到了原来未追踪的状态、（即将暂存区的文件删除）</p><h5 id="提交到本地库"><a class="markdownIt-Anchor" href="#提交到本地库"></a> <strong>提交到本地库</strong></h5><p><strong>命令：</strong><code>git commit</code></p><p><strong>效果：</strong><img src="https://i.loli.net/2021/07/21/IP2bVGdAeDTBfFY.png" loading="lazy"></p><p>git提醒你去为你的这次提交输入信息（输入信息的注释）</p><p>使用vim编辑器输入要提交的注释</p><p><strong>效果：</strong><img src="/.com//CkGYiIm5ndqJrBV.png" loading="lazy"></p><p>在第四行是根提交（<code>root commit</code>）后面是你输入的信息</p><p>第五行显示的是文件的状态，一个文件被修改，三行的内容变化</p><p>再次输入<code>git status</code>，出现<img src="/.com//se2dzVvgK6NADJu.png" loading="lazy"></p><p>第三行的<code>nothing to commit</code>表示在暂存区中没有可以提交的文件而<code>working tree clean</code>字面意思，工作树是干净的，也是没有东西可提交的意思</p><p>使用vim编辑器对提交到本地库中的文件进行修改，加上一行的u</p><p>用<code>git status</code>查看状态</p><p><strong>效果：</strong><img src="/.com//dqD2Vyv4ONPxAFK.png" loading="lazy"></p><p>可以看到git已经检测到你的修改<code>modified</code>，git同样提示可以使用<code>git add</code> 命令去<code>update</code>（<strong>这里注意这个命令和没有提交时的名利有一点不同，之前是<code>track</code>，现在是<code>update</code>，一个是在未提交时追踪，一个是提交后更新</strong>（<strong><code>注意这里的提交是到暂存区而不是本地库</code></strong>））</p><p>git同时还提示可以使用<code>git restore</code>去重置回原来的版本</p><p>最后一行的<code>and/or</code>表示可以使用git add 先将文件提交到暂存区，然后<code>git commit</code>提交到本地库，或者使用<code>git commit -a</code>直接将其提交到本地库</p><p><strong>注</strong>：在提交文件到本地库的操作中 (<code>git commit</code>)，可以使用<code>git commit -m</code>命令直接在后面输入注释内容，无需再进入vim编辑器</p><p><strong>效果：</strong><img src="/.com//ONLEyrKIW69C8Rx.png" loading="lazy"></p><p>第二行由根目录变成了一个其他目录</p><p>第三行表示状态：有一行的内容被修改，一个文件有改变</p><h5 id="img-srcgit学习笔记mv5ndxeamowjxy4png"><a class="markdownIt-Anchor" href="#img-srcgit学习笔记mv5ndxeamowjxy4png"></a> <img src="/.com//Mv5nDXeAmoWjxY4.png" loading="lazy"></h5><h4 id="版本的前级和后退"><a class="markdownIt-Anchor" href="#版本的前级和后退"></a> 版本的前级和后退</h4><p>版本的前进和后退是git实现项目管理的最重要的操作。</p><p>原理：git进行版本控制的原理主要是通过HEAD头指针的移动来实现的</p><h5 id="版本记录的查看"><a class="markdownIt-Anchor" href="#版本记录的查看"></a> <strong>版本记录的查看</strong></h5><p><strong>命令</strong>：<code>git log</code></p><p><strong>效果：</strong><img src="/.com//SXY8lRx2FEWJgrs.png" loading="lazy"></p><p>可以从效果中看到提交的索引（commit 后面的一大串）和一个HEAD指针指向的分支（master）</p><p>还有就是作者，提交日期，以及提交时的注释。</p><h5 id="其他查看方法"><a class="markdownIt-Anchor" href="#其他查看方法"></a> <strong>其他查看方法</strong></h5><p><strong>命令</strong>：<code>git log -- pretty=one</code></p><p><strong>效果：</strong></p><img src="https://i.loli.net/2021/07/21/DiLdgzM3Hl4vEcA.png" loading="lazy"><p>将每次的信息缩减值一行</p><p><strong>命令:</strong><code>git log --oneline</code> (注意只能看见当前版本前的版本，无法回到以后的版本)</p><p><strong>效果：</strong><img src="/.com//DiLdgzM3Hl4vEcA.png" loading="lazy"></p><p>将索引的哈希链缩的更短、</p><p><strong>命令：</strong><code>git reflog</code>（最常用）</p><p><strong>效果：</strong><img src="https://i.loli.net/2021/07/21/ZcMvJHmGRLDrsK5.png" loading="lazy"><br><img src="/.com//y5lekuNOVRYQ1Ho.png" loading="lazy"></p><p>在oneline基础上显示移动至当前版本所需的步数</p><p>HEAD@{移动到当前版本所需的步数}</p><h5 id="版本的前进和后退的操作"><a class="markdownIt-Anchor" href="#版本的前进和后退的操作"></a> <strong>版本的前进和后退的操作</strong></h5><h6 id="基于索引值操作"><a class="markdownIt-Anchor" href="#基于索引值操作"></a> <strong>基于索引值操作</strong></h6><p><strong>命令：</strong><code>git reset --hard &lt;index&gt;</code></p><p><strong>效果：</strong><img src="/.com//CWeyXcMbuVLdGp7.png" loading="lazy"></p><p>在使用<code>git reflog</code>查看</p><p>!<img src="/.com//HBYbqzRpka9DnP1.png" loading="lazy"></p><p>可以看到指针已经指向了要索引的地址，即实现了版本的前进和后退操作</p><p>**注：**在输入索引值时，只要选中就进行了复制，可以直接粘贴下来</p><h6 id="使用符号"><a class="markdownIt-Anchor" href="#使用符号"></a> <strong>使用<code>^</code>符号</strong></h6><p><strong>特点</strong>：只能后退</p><p>可以使用<code>git log --onelline</code>更加有效</p><img src="https://i.loli.net/2021/07/21/VCD68HgmhJe15Sx.png" loading="lazy"><p><strong>命令</strong>：<code>git reset --hard HEAD ^</code>注意一个<code>^</code>表示后退一个版本</p><img src="https://i.loli.net/2021/07/21/18ATYfpzLW2NaxX.png" loading="lazy"><h6 id="使用~符号"><a class="markdownIt-Anchor" href="#使用~符号"></a> <strong>使用<code>~</code>符号</strong></h6><p><strong>特点</strong>，同样只能用来回退</p><p>用法是将<code>^</code>符号的个数变成<code>~ &lt;number&gt;</code></p><p><strong>命令</strong>：<code>git reset --hard HEEAD ~n</code></p><h6 id="hardsoft和mixed参数的区分"><a class="markdownIt-Anchor" href="#hardsoft和mixed参数的区分"></a> <strong>hard，soft，和mixed参数的区分</strong></h6><p>hard soft和mixed都是git reset命令的参数</p><p>首先介绍一个git命令：<code>git help</code>这是一个帮助命令，在后面可以输入操作命令去查看命令参数的描述，这个文档是在安装git时就内置在安装包里面的，使用 git help命令可以直接打开相应的文档查看、</p><p><strong>–soft</strong></p><p>文档描述</p><blockquote><p>Does not touch the <strong>index file</strong> or the <strong>working tree</strong> at all (but resets the head to <code>&lt;commit&gt;</code>, just like all modes do). This leaves all your changed files “Changes to be committed”, as <code>git status</code> would put it.</p></blockquote><p>看文档可以知道 <code>--soft</code> 参数不会去改变工作区和暂存区的内容，他改变的仅仅是本地库中的内容，下面来实际操作一下。</p><p>首先看一下没使用reset之前本地库的内容</p><img src="https://i.loli.net/2021/07/21/qT7wctH4bdYkeVL.png" loading="lazy"><p>然后看一下工作区的内容</p><img src="https://i.loli.net/2021/07/21/kdQBiq1rHVWCcDE.png" loading="lazy"><p>可以看到这里工作区和本地库的内容是一一对应的</p><p>然后我们使用<code>--soft</code>参数将本地库的内容索引到另一个版本</p><img src="https://i.loli.net/2021/07/21/7FHpzUADVGRQcoh.png" loading="lazy"><p>在使用<code>git reflog</code>查看本地库中的内容</p><img src="/.com//kdQBiq1rHVWCcDE.png" loading="lazy"><img src="https://i.loli.net/2021/07/21/2dei1zP9TgmVkMn.png" loading="lazy"><p>查看工作区</p><img src="https://i.loli.net/2021/07/21/kdQBiq1rHVWCcDE.png" loading="lazy"><p>可以看到本地库的指针已经发生变化，但工作区的内容仍未改变</p><p>用<code>git status</code>查看一下暂存区的状态</p><img src="https://i.loli.net/2021/07/21/yuBgsT2iZDO4UvS.png" loading="lazy"><p>看到的是绿色的内容，说明工作区和暂存区的内容是保持一致的</p><p>这里留个问题：为什么在改变本地库后，原来已经提交后的暂存区却能被<code>git status</code>找出来而且判断已经被修改了呢？</p><p><strong>–mixed</strong></p><p>文档描述</p><blockquote><p><strong>Resets the index but not the working tree</strong> (i.e., the changed files are preserved but not marked for commit) and reports what has not been updated. This is the default action.</p></blockquote><blockquote><p>If <code>-N</code> is specified, removed paths are marked as intent-to-add (see <a href="git-add.html">git-add(1)</a>).</p></blockquote><p>可以看到<code>--mixed</code>参数改变的是本地库和暂存区的内容，但并没有改变工作区的内容，下面进行实操</p><img src="https://i.loli.net/2021/07/21/yuBgsT2iZDO4UvS.png" loading="lazy"><img src="/.com//qT7wctH4bdYkeVL.png" loading="lazy"><img src="https://i.loli.net/2021/07/21/kdQBiq1rHVWCcDE.png" loading="lazy"><p>在没有使用<code>git reset</code>时，一切还是保持老样子，工作区，暂存区和本地库是保持一致的</p><p>然后使用<code>--mixed</code>参数进行操作</p><img src="https://i.loli.net/2021/07/21/qFBDAfEWnYp7mjy.png" loading="lazy"><p>查看一下暂存区的状态</p><img src="https://i.loli.net/2021/07/21/LP71ASlvkgfzRhO.png" loading="lazy"><p>这里出现了红色的字，表示的是暂存区和工作区没有保持一致，也就是说，暂存区和本地库都改变了，但工作区没有变化、</p><p><strong>–hard</strong></p><p>文档描述</p><blockquote><p><strong>Resets the index and working tree.</strong> Any changes to tracked files in the working tree since <code>&lt;commit&gt;</code> are discarded.</p></blockquote><p>可以看出<code>--hard</code>参数是把三者都重置到了要重置的版本上、这个参数是十分快捷的，要想回退或前进版本，直接就可以使用这个参数，一步到位，不需要考虑暂存区，工作区是否也跟着前进和后退了，所以hard参数是最方便也是最常用的。</p><h6 id="删除文件的找回"><a class="markdownIt-Anchor" href="#删除文件的找回"></a> <strong>删除文件的找回</strong></h6><p>在使用git时，如果不小心将文件从工作区删除了，也是可以用git找回的，但是有一个前提条件，就是必须把文件的操作信息存到本地库中去，也就是说，你在删除前使用<code>git add</code> 和 <code>git commit</code>将文件提交到了本地库。这样你就可以用版本回退的方式找回自己的文件。</p><p>因为内容和前面的回退操作比较相同，这里就不实际操作了，（主要是怕麻烦   斜眼笑.jpg）</p><p>但是可以看<a href="https://www.bilibili.com/video/BV1pW411A7a5?p=20">这个视频</a>，上面有详细的操作</p><h6 id="比较文件的差异"><a class="markdownIt-Anchor" href="#比较文件的差异"></a> <strong>比较文件的差异</strong></h6><p>git是可以去比较不同版本之间文件的差异的，具体的命令是<code>git diff</code>，下面我就来实际操作一下。</p><p>首先，创建一个新的文档，提交到本地库</p><img src="https://i.loli.net/2021/07/21/4ohFcZSrasPYMGB.png" loading="lazy"><p>然后对该文档进行修改</p><img src="https://i.loli.net/2021/07/21/tIPdaRXpuG1zqFM.png" loading="lazy"><p>我修改了apple.txt文档，在第三行上加入了@@@@@</p><p>下面使用<code>git diff</code>命令去比较文档</p><img src="https://i.loli.net/2021/07/21/ZYnI7RkqzaDA9C8.png" loading="lazy"><p>可以看到使用<code>git diff</code>命令后，文档和<strong>暂存区</strong>的文档进行了比较，比较出了第三行少了一行apple ，但多了一行apple@@@@@。</p><p>红色的前面带的是<code>-</code>号，表示的是原文档与要比较的文档之间少的内容。</p><p>绿色的前面带的是<code>+</code>号，表示的是原文档与要比较的文档之间多的内容。</p><p>如果使用<code>git add</code>将文件提交到的暂存区，在使用<code>git diff</code>进行比较，是无法比较出差异的，这就说明了<code>git diff</code>这个命令在未加参数时表示的是与暂存区的比较</p><p><code>git diff</code>命令也可以和本地库的历史版本进行比较，这个后面需要加上HEAD的参数，表示与本地库中HEAD指针指向的版本之间进行比较。</p><img src="https://i.loli.net/2021/07/21/KPOIydciA893fW4.png" loading="lazy"><h4 id="git的分支"><a class="markdownIt-Anchor" href="#git的分支"></a> git的分支</h4><h6 id="为什么git会有分支"><a class="markdownIt-Anchor" href="#为什么git会有分支"></a> <strong>为什么git会有分支</strong></h6><p>在版本控制的过程中，会有多个项目同时推进的情况，这时候就要用到分支。</p><p>所以分支就是<strong>在版本控制中，使用多条线同时推进多个任务</strong>，下面用一个图来说明：</p><img src="https://i.loli.net/2021/07/21/jrfve4oM9qUOwgi.png" loading="lazy"><p>假设我们要开发一个项目，并且使用git作为我们版本控制的工具，开始我们会有一个master主干，我们的第一代项目在这个主干上。有了一代产品，我们就想在产品上多加一些新的功能。我们准备为我们的产品开发一个主题，于是我们就多了一条线，命名为feature_blue表示我们想去开发一个blue主题。然后我们将我们的主干上的版本拉到我们这条分支上，就是将master的版本复制到feature_blue上，这时两条线是互不干扰的，可以同时再进行开发，在blue线上，我们是基于主干上的一代进行开发的，在开发完成之后（开发过程中支线上可以有多个版本），在去把支线上的版本与主线上的版本进行合并。这样我们就基于一代的产品上开发出了带有blue主题的二代版本。同样的方法，我们可以再开一条线，为我们的版本开发出一个小游戏feature_game。</p><p>同时，分支对版本的修复与维护也十分方便。假设我们的产品现在出了个bug，我们可以开一条线hot_fix去修复bug，我们把master的内容拉到hot_fix上，然后在hot_fix上去进行修复，再将修复好的版本合并到master上，这样可以保证在主线项目正常运行的基础上去对其进行修复。</p><h6 id="分支的好处"><a class="markdownIt-Anchor" href="#分支的好处"></a> <strong>分支的好处</strong></h6><ul><li>分支可以同时并行推进多个功能的开发，提高开发效率。</li><li>各个分支在开发过程中，如果一个分支开发失败，不会对其他分支有任何影响，失败的分支删除重新开始即可。</li></ul><h6 id="分支的实际操作"><a class="markdownIt-Anchor" href="#分支的实际操作"></a> <strong>分支的实际操作</strong></h6><h6 id="分支的创建查看及转换"><a class="markdownIt-Anchor" href="#分支的创建查看及转换"></a> <strong>分支的创建查看及转换</strong></h6><p>首先用<code>git status</code>看一下</p><img src="https://i.loli.net/2021/07/21/hw82cimjJ6z9Vsf.png" loading="lazy"><p>可以看到git在刚创建是就会有一个主干分支master，而且现在就在这个master分支上，</p><p>我们可以使用<code>git branch -v</code>去查看在这个项目上所有的分支</p><p>使用<code>git branch</code>去创建一个新的分支hot_fix（<strong>注意创建好一个分支就已经把master分支上的项目复制过来了</strong>）</p><p>使用<code>git checkout</code>去转换分支</p><img src="https://i.loli.net/2021/07/21/NCzRFt6Kvb8Xx3G.png" loading="lazy"><img src="https://i.loli.net/2021/07/21/HXdV51PQBqLv8rF.png" loading="lazy"><h6 id="分支的合并"><a class="markdownIt-Anchor" href="#分支的合并"></a> <strong>分支的合并</strong></h6><p>我们对hot_fix分支上的apple.txt文件进行了修改，在通过<code>git add</code> <code>git commit</code>把它提交到了本地库</p><p>这样hot_fix相对于master就快了一步，我们将hot_fix合并到master上。</p><ul><li>第一步：切换到接受修改的分支（被合并，要增加新内容）上<ul><li><code>git checkout</code>[被合并分支名]</li></ul></li><li>执行<code>merge</code>命令<ul><li><code>git merge</code>[有新内容的分支名]</li></ul></li></ul><img src="https://i.loli.net/2021/07/21/vRStxVhM2gXUI68.png" loading="lazy"><h6 id="冲突的解决"><a class="markdownIt-Anchor" href="#冲突的解决"></a> <strong>冲突的解决</strong></h6><p><strong>为什么会产生冲突</strong></p><p>分支在合并时，如果去合并的分支比被合并的分支进度快，而且前面的版本是相同的（相同文件的相同位置，并且内容一致），那么分支合并就是直接合并的（将要合并的版本合并到被合并的版本上，都变成了要合并的那个版本），但是如果合并之前的版本是不同（相同文件的相同位置，内容不一致）的，那么就会产生冲突，因为git无法判断哪一个版本要留下，这时git会发出提醒，让开发者去决定。</p><p>下面来实操一下</p><p>现在我们有两个分支，master和hot_fix，每个分支都用两个文件good.txt和apple.txt，我们使用vim编辑器去改变good.txt的内容，让他们中的同一行出现不同的输入。然后对他们进行merge合并</p><img src="https://i.loli.net/2021/07/21/Mb73cLICRAVTtKF.png" loading="lazy"><p>git提示自动合并失败，需要进行手动合并，并且最右边的（merge）变成了（master|MERGEING）</p><p>这时使用vim编辑器打开good.txt</p><img src="https://i.loli.net/2021/07/21/cNwi51YAnSC2Rto.png" loading="lazy"><p>发现good.txt里面多了几行，其中上面的</p><p>&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p><p>bbbbbb edit by masteri</p><p>== == ==</p><p>表示的是要合并的分支（master）的冲突的内容</p><p>下面的表示的是去合并的分支（hot_fix）的从图的内容</p><p>这时可以再vim编辑器中直接去修改，最后得到最终版本即可</p><p>修改完成后用`git status查看一下状态</p><img src="https://i.loli.net/2021/07/21/FAWKYsL4UuTH9Vc.png" loading="lazy"><p>这时表示暂存区和工作区的文件不同，</p><p>可以用<code>git add</code> <code>git commit</code>去提交到本地库，<strong>注意在用<code>git commit</code>操作时后面不要跟文件名，否则会出现错误</strong></p><h4 id="git基本原理"><a class="markdownIt-Anchor" href="#git基本原理"></a> git基本原理</h4><p>在介绍git的基本原理之前，先了解一个概念：<strong>哈希</strong></p><h6 id="哈希是什么呢"><a class="markdownIt-Anchor" href="#哈希是什么呢"></a> <strong>哈希是什么呢?</strong></h6><p>先看一下维基百科的定义</p><blockquote><p><strong>散列函数</strong>（英语：Hash function）又称<strong>散列算法</strong>、<strong>哈希函数</strong>，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0">函数</a>将数据打乱混合，重新创建一个叫做<strong>散列值</strong>（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用一个短的随机字母和数字组成的字符串来代表。</p></blockquote><p>从上面的定义我们知道，哈希是通过一系列复杂的计算，将任何一种数据通过算法的计算输出成一种固定格式的数据。它具有以下特点：</p><img src="https://i.loli.net/2021/07/21/6m7VxeYzHTDAwvZ.png" loading="lazy"><p>因为这些特点，哈希具有很多用途。</p><p>最常用的是确保传输数据的准确性，如果数据在传输过程中出现了一点错误，那么使用同一种哈希算法的结果就会天差地别。因此可以通过哈希算法可以检验在数据传输过程中是否被篡改。</p><h6 id="git的数据存储机制"><a class="markdownIt-Anchor" href="#git的数据存储机制"></a> <strong>git的数据存储机制</strong></h6><img src="https://i.loli.net/2021/07/21/l5KyfAh6Dnge81W.png" loading="lazy"><h6 id="git的分支管理"><a class="markdownIt-Anchor" href="#git的分支管理"></a> <strong>git的分支管理</strong></h6><h4 id="远程库的操作"><a class="markdownIt-Anchor" href="#远程库的操作"></a> 远程库的操作</h4><p>git远程库的操作主要是git和代码托管中心GitHub共同运行的。</p><p>所以我们要了解GitHub的相关操作。</p><h5 id="github的注册"><a class="markdownIt-Anchor" href="#github的注册"></a> <strong>GitHub的注册</strong></h5><p>可以参见具体的<a href="https://docs.github.com/cn/github/getting-started-with-github/signing-up-for-github/signing-up-for-a-new-github-account">官方文档</a>  不过我相信这点肯定难不倒大家。</p><h5 id="github的使用"><a class="markdownIt-Anchor" href="#github的使用"></a> <strong>GitHub的使用</strong></h5><p>我们先来回顾一下git协同开发的流程</p><blockquote><img src="/.com//image-20210711151558855.png" alt="image-20210711151558855" style="zoom: 25%;" loading="lazy"><p>**工作原理：**项目创建人将自己的本地库<code>push</code>到代码托管中心（远程库），任何人（有权限访问）可以将远程库<code>clone</code>到自己的本地库中，然后进行操作，但个人的修改不能直接上传到远程库，需要加入团队。然后将自己修改后的本地库<code>push</code>到远程库（由于使用git，会保留所有版本的记录），然后小组的其他成员将远程库<code>pull</code>回自己的本地库。从而实现团队之间的协同开发。</p><img src="/.com//image-20210711151842504.png" alt="image-20210711151842504" style="zoom:25%;" loading="lazy"><p>**工作原理：**对于团队外的成员，如果也想去参与团队的开发，可以<code>fork</code>该团队的远程库，将这个远程库传到自己的远程库中，再通过<code>clone</code>将远程库下载到本地库中，然后进行开发，再通过<code>push</code>将自己本地库<code>push</code>到自己的远程库中。然后向项目开发团队发送一个<code>push resquet</code>经由开发团队审核后可以传向开发团队的远程库，然后开发团队中的成员再<code>pull</code>到自己的本地库。</p></blockquote><p>依照这个流程我们梳理一下步骤</p><h5 id="对于团队开发"><a class="markdownIt-Anchor" href="#对于团队开发"></a> 对于团队开发</h5><p>首先由项目创建人创建一个项目（本地库），然后通过<code>git init</code>    <code>git add</code>     <code>git commit</code>去提交到本地库，流程与前面没有差别，但这是使用的是全局化的签名，无需再设置新的项目签名。</p><h6 id="创建github远程库"><a class="markdownIt-Anchor" href="#创建github远程库"></a> <strong>创建GitHub远程库</strong></h6><p>本地库创建好之后，我们需要设置远程库，具体的做法是在<a href="https://docs.github.com/cn/github/getting-started-with-github/quickstart/create-a-repo">GitHub上创建一个仓库</a>。</p><p>使用<code>git push</code>操作去将本地库push远程库</p><p>想要push操作，就一定要知道远程库的地址，在GitHub上创建地址后，我们可以在code哪里找到创建仓库的http和ssh地址，这个地址就是远程库的地址。</p><p>我们先用http地址连接到远程库</p><p>我们从code哪里将项目地址复制下来，但是网址很长，git提供了一个命令去给地址别名，</p><p>使用<code>git remote -v</code>查看地址的别名</p><p>使用 <code>git remote add &lt;别名&gt; &lt;地址&gt;</code></p><p>这是再次使用<code>git remote -v</code>查看，可以看到两个地址</p><img src="https://i.loli.net/2021/07/21/ytzwV6319emGIYQ.png" loading="lazy"><p>其中<code>fetch</code>用于取回，<code>push</code>用于推送</p><h6 id="向远程库推送"><a class="markdownIt-Anchor" href="#向远程库推送"></a> 向远程库推送</h6><p>然后使用<code>git push</code>命令推送，注意推送时需要指出<strong>别名</strong>和要<strong>推送的分支</strong></p><img src="https://i.loli.net/2021/07/21/AN45p6IUJSyGXsh.png" loading="lazy"><p>按下回车键，这是会弹出GitHub登录的窗口，输入自己的GitHub账号</p><p>这样就把本地的修改推送到了远程库</p><h6 id="从远程库克隆"><a class="markdownIt-Anchor" href="#从远程库克隆"></a> 从远程库克隆</h6><p>那别人怎么将远程库clone到自己的本地库中呢？</p><p>我们可以使用<code>git clone &lt;地址&gt;</code>命令去将远程库克隆到本地库。</p><p>由于是读取操作，所以无需登陆账号</p><p>在执行完命令后，git会自动下载远程库中的内容，克隆出的本地库与远程库是一模一样的（包括文件，初始化，分支，和别名）</p><h6 id="团队之间的修改"><a class="markdownIt-Anchor" href="#团队之间的修改"></a> 团队之间的修改</h6><p>别人clone到本地库中做出修改，如果想要push到远程库，就需要项目创建人邀请加入团队。（具体的操作可以在google上查教程</p><p>）邀请成功后就可以将更新后的项目push到远程库了。</p><p>那么项目中的其他人可以将更新的版本<code>pull</code>到自己的本地库，</p><p><code>pull</code>有以下操作：</p><p><code>git fetch &lt;地址&gt; &lt;分支&gt;</code></p><p>fetch是不会直接修改本地库的文件，相当于把远程库的分支下载下来，</p><p>我们可以用<code>checkout</code>去检查。</p><p>然后使用<code>git merge&lt;地址别名|远程分支名&gt;</code></p><p>这两个操作和直接使用<code>git pull</code>命令是一样的。</p><p>这样同样会有另外的一个问题：怎样解决冲突?</p><p>如果双方修改了同一个项目同一个位置的不同内容，那么在往远程库push是就会发生冲突，GitHub默认是按照时间来判断的，也就是说如果两个人都开发了新版本，最快提交的会直接推送成功，而另一个如果有冲突就会push失败。这是就要把上一个人更新后的远程库pull到本地库，这是就会进入冲突状态，处理方法与前面处理分支方法类似。</p><h5 id="对于跨团队协作"><a class="markdownIt-Anchor" href="#对于跨团队协作"></a> 对于跨团队协作</h5><p>不同团队之间共同开发时，只需要在GitHub上将远程库<code>fork</code>下来，这样就在自己的远程库中存储下了项目，修改就与前面完全相同。</p><p>如果想要提交到原开发团队，需要在GitHub上发出<code>pull request</code>，等待原项目创建负责人审核即可。</p><h2 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h2><p>这个文章是我第一次写，无论是排版布局，还是内容深度，严谨性都有很多不足之处，而且配大量图算是一个失智之举，让这篇文章看起来十分冗杂，以后还是多用代码块来说明问题吧，这样不仅展示效果好，还附带有思考的空间。一味的将结果呈现出来，那是教程视频来干的事情，而不是博客文章。这篇算是一次试水，以后有时间我会将这些毛病改掉，给大家呈现出更精致，更适用的git笔记！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简介&quot;&gt;&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;这是我第一次发博客的学习文章，这个文章是我在学习git时做的笔记，为了弄懂我配了大量的图片，看完之后应该对git，github，版本控制都有一定的了解。当然这不是所谓的技术文章（事实上我现在也没能力去写技术文章），仅仅是把我的学习记录下来。文章是参考廖雪峰老师的git教程，和尚硅谷的git视频来写的。大家如果要学习的话建议去看看。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://liuhd.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="git|github" scheme="http://liuhd.com/tags/git-github/"/>
    
    <category term="版本控制" scheme="http://liuhd.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    <category term="学习笔记" scheme="http://liuhd.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《20世纪最伟大的心理学实验》</title>
    <link href="http://liuhd.com/2021/09/13/20%E4%B8%96%E7%BA%AA%E6%9C%80%E4%BC%9F%E5%A4%A7%E7%9A%84%E5%BF%83%E7%90%86%E5%AD%A6%E5%AE%9E%E9%AA%8C/"/>
    <id>http://liuhd.com/2021/09/13/20%E4%B8%96%E7%BA%AA%E6%9C%80%E4%BC%9F%E5%A4%A7%E7%9A%84%E5%BF%83%E7%90%86%E5%AD%A6%E5%AE%9E%E9%AA%8C/</id>
    <published>2021-09-13T02:55:52.891Z</published>
    <updated>2021-09-22T14:58:42.123Z</updated>
    
    <content type="html"><![CDATA[<img src="https://i.loli.net/2021/09/22/zSVFroOl1YEW9Is.jpg" loading="lazy"><span id="more"></span><h2 id="作者简介"><a class="markdownIt-Anchor" href="#作者简介"></a> 作者简介</h2><blockquote><p>劳伦•斯莱特</p><p> 哈佛大学心理学硕士，波士顿大学教育学博士，既是一名心理学家，也是一名专业作家。</p><p> 她的写作风格受到学术的批评，但深受普通读者的喜爱。这本书被誉为“沟通学术与大众最重要的作品”。</p><p> 她的作品获奖颇丰。其著述曾获选收录于《全美最佳论文》、《全美最佳科学著作》、《全美最佳杂志论文》等论文选集。</p></blockquote><h2 id="内容简介"><a class="markdownIt-Anchor" href="#内容简介"></a> 内容简介</h2><blockquote><p>《20世纪最伟大的心理学实验》是惊悚有趣的心理学实验，探索人类心灵的十大发现，“普通心理学”课程必读。</p><p>作者重新诠释了20世纪心理学探索人类心灵的非凡成就，以10个设计精巧的天才实验为例，结合小说、传记、采访等多种体裁，让你仿佛与作者、实验当事人共处一室，倾听他们的生命叙事，深刻体会心理实验背后的深邃涵义。</p><p>作者剖析议题深入详尽呈现清晰实像，让单调冰冷的科学实验，得以展现丰富感性的内涵。对于人性本质的优劣，不仅见解独到，更发人深省。</p></blockquote><h2 id="读书笔记"><a class="markdownIt-Anchor" href="#读书笔记"></a> 读书笔记</h2><h3 id="第一章打开斯金纳箱"><a class="markdownIt-Anchor" href="#第一章打开斯金纳箱"></a> 第一章：打开斯金纳箱</h3><p>先提一个耳熟能详的人物，巴普洛夫大家都听过，俄国著名的生化学家。</p><p>不出意外的话，大家对他的了解都来自于高中生物书上那句“巴普洛夫的感慨”（什么，你说你没印象。没关系，我来帮你回忆回忆( ‵▽′)ψ）</p><p><img src="https://i.loli.net/2021/08/09/Wk5QVE3G6lem9IU.png" alt="Audits - Lighthouse" loading="lazy"><em>是不是想起了被高中课本支配的恐惧了呢┏(＾0＾)┛</em></p><p>当然，巴普洛夫并非只是这样“无能狂怒”，要不然也不会是“最伟大的生理学家”了，巴普洛夫最著名的还是那条“<a href="https://zh.wikipedia.org/wiki/%E5%B7%B4%E7%94%AB%E6%B4%9B%E5%A4%AB">巴普洛夫的狗</a>”，通过对狗唾液腺的研究，巴普洛夫发现了“经典的条件反射”。</p><blockquote><p>简言之，即动物既有的本能反应，如：眨眼、惊吓、流口水等，可用人为的方式加以控制，使其伴随新刺激出现。在巴甫洛夫著名的实验中，铃声是新刺激，狗听到铃声，就想到食物，所以一听到铃声就会流口水</p></blockquote><p>虽然现在你可能不以为意，但在当年，这项发现可是广受各界瞩目，讨论的热烈程度不逊于原子融合、太阳位置恒定等重大科学突破。在此之前，人类从不知道，**许多我们认为受心智主导的反应其实与生理学有着密切关系，我们以前总以为与生俱来的动物本能无法改变，事实上却具有高度可塑性。**巴甫洛夫流口水的狗，颠覆了长久以来被你我视为理所当然的两个观念。</p><p>当然，我们现在并不关心那只被“玩坏”的可怜的狗狗。</p><p>你只需要知道，狗在听到铃声后的唾液分泌其实是一种本能反应，狗看到食物就会馋的流口水，这并不是狗控制的了的，完全出于本能，而巴普洛夫的实验证明了，在足够的刺激下，这种本能的反射会在人为的方式下激发。</p><p>而今天提到的斯金纳，那可就大不一样了。</p><p><strong>他带来了那个魔术的“箱子”。</strong></p><p>关于斯金纳的生平，我给大家放在<a href="https://zh.wikipedia.org/wiki/%E4%BC%AF%E5%B0%94%E8%B5%AB%E6%96%AF%C2%B7%E5%BC%97%E9%9B%B7%E5%BE%B7%E9%87%8C%E5%85%8B%C2%B7%E6%96%AF%E9%87%91%E7%BA%B3">这里</a>，有兴趣的可以了解一下。</p><p>斯金纳是巴普洛夫的粉丝，他对巴普洛夫的唾液腺研究十分感兴趣，但他的目标更远大，既然可以控制特定的腺体，那么有没有可能控制整个生物体呢？人的行为根据环境做出来的，与狗本能的流口水不同，人的这种反应是一种有意识的行为。那么，有没有可能人也可以经过训练，主动的做出某个非本能的动作呢？</p><blockquote><p>例如，要某人把头向右转，且持续给予奖赏，不久之后，此人是否就会牢记这个动作，持续向右看？若有这种可能，那么哪些行为可以比照办理呢？我们能像马戏团的动物那样，轻松优雅地跳过火圈吗？</p></blockquote><p>带着这个疑问，斯金纳设计出了一个实验操作箱。开始了对老鼠的研究。</p><blockquote><p>这个箱子以压缩空气为运转动力，由各式零件齿轮组成机械装置，可依实验者设定，释放出特定的奖惩物。</p></blockquote><p>实验是这样的：</p><blockquote><p>他把老鼠放到箱子里，实验就此展开。经过很长一段时间，事实上是好几年，他发现这些大脑如豆子般大的老鼠，为了取得作为奖赏的食物，可以很快学会按压控制杆。<strong>巴甫洛夫强调前刺激（prior stimulus），即事先出现的铃声，会让动物产生何种反应。斯金纳则注重结果（consequence），即事后给予食物，对动物的行为有何影响。</strong><br>斯金纳的实验和巴甫洛夫早期的研究差别不大，结果并不令人意外。美国心理学家桑代克（Thorndike）也曾做过类似实验，关在木箱里的猫偶然踩到某个踏板，而获得一些奖赏，之后它便会刻意去踩踏板。斯金纳的实验明显沿袭自桑代克。然而斯金纳的成果远超过这两个人。他首先让老鼠意外踩到控制杆，掉出食物颗粒，原先无意间的举动遂转变为刻意的行为。斯金纳进一步实验，将奖赏移除或改变出现频率，观察这对老鼠行为有何影响，最后他终于归纳出放诸四海皆准的人类行为定律，至今依然颠扑不破。<br>一开始只要老鼠压杆，就可以得到食物，后来斯金纳改变他所谓的固定比例（fixed-ratio）的奖赏。老鼠若要获得奖赏，必须压杆3次、5次，或是20次。想象自己是只老鼠，一开始每次压杆都有东西吃。接着你压一下控制杆，没有食物，再压一次，还是没有东西，你又压了一次，银色喷管里终于掉出食物，你吃掉食物后走开。过一会儿，你又想吃东西了，这回你不需用脚爪按一次停一下，一口气连按三次就好了。强化物出现的频率改变了动物的反应方式。<br>除了固定比例的奖赏，斯金纳也尝试把奖赏移除，观察结果。奖赏移除的实验中，斯金纳移除所有的强化物，最后他发现如果他停止给老鼠食物，老鼠逐渐不去压杆，最后就算听到喷管里有东西沙沙作响，它们也无动于衷。斯金纳又开始思考：**老鼠在固定比例奖赏情境下，学会新反应需要多长时间？奖赏突然移除后，经过多久才会停止这种反应？**于是他在箱子上设置记录器，精确测量在不同情境条件下的频率变化，并绘制图表，获得具体数据。这些资料不仅显示有机体的学习模式，也可作为预测并控制学习结果的依据。</p></blockquote><p>斯金纳的研究并未停止</p><blockquote><p>他进而研究其所谓的不固定的强化（variable schedules of reinforcement），且获得了最为重要的发现。他改变压杆获得食物奖励的比例，多数时候老鼠空手而回，但也许在压杆第40或60次时，突然获得食物奖励。一般人直觉地认为，随机且间隔如此长的奖赏，会使老鼠对获得奖赏不抱希望，致使压杆行为消失。事实却并非如此。斯金纳发现**，间歇给予食物奖赏的方式，反而让这些老鼠像染上毒瘾一样，不断压杆，不论能否得到奖赏。斯金纳还将固定比例（如压杆4次就给予食物）与不规则的间歇奖赏进行对比，他发现奖赏间隔不规则的情境下，消除既有行为需时最久。**</p></blockquote><p>斯金纳的这项发现被称作“<strong>间歇性强化</strong>”，这个发现可以解释很多我们现实中的愚蠢行为，为什么有的人身心健全，却在烟雾弥漫的赌场中散尽全部的家财，最终身败名裂。为什么我们的好友会痴痴地守着微信QQ，苦候恶劣男友偶尔心血来潮打来的电话。为什么男同学对基金情有独钟。为什么吴签明知诱骗未成年人犯法，还要喊着“我自己会进监狱”而持续自己的“三分钟行为”，最后领了牢饭。<strong>我们做出的这些蠢事，即使得不到回报，却仍然执迷不悟。就是因为这是一种心理作用，是间歇性强化。</strong></p><p>由此，斯纳金发展出了<strong>行为科学</strong>，他主张我们应当正确评价环境所施加的巨大控制（影响），而遵循特定方式建构环境，使其给予我们“正强化”，也就是要引导我们言行合宜，适应环境，发挥创意。斯金纳呼吁社会采取正向的暗示，引导人们表现出最好的一面，消除会导致困窘愧疚的负面情境，如监狱、贫穷。换言之，斯金纳主张停止处罚。通过奖励的方式去规范人的行为。研究发现，奖励比惩罚更能促成人的行为。这点其实是显而易见的，没人喜欢惩罚，相比于做错事的惩罚，人们对做正确的事的奖励更加趋之若鹜。</p><p>当然，斯金纳的研究方式后来趋向于极端，他后来想要研究这种行为科学对人的影响，就把 女儿放在斯金纳箱里训练了两年，目的是观察人在可操作的条件下是否能训练出现在人无法 做到的事情。所以尽管斯纳金是一个十分爱子女，并充满人文主义精神的人，他的这种方法依然引发了巨大的争议。</p><p>但是，斯纳金的研究是十分有意义的，不但解释了我们做出愚蠢行为的原因，也被应用到很多地方。</p><blockquote><p>20世纪五六十年代，公立精神病院将斯金纳的行为理论应用于重度精神病人。例如，病人每举起汤匙吃一口饭菜，就能得到一根渴望已久的香烟，操作性条件反射原理让治愈无望的精神分裂症患者学会自己更衣进食。20世纪后期，临床学家也依据斯金纳操作性条件反射理论，有系统地使用脱敏法（desensitization）￼、满灌法（flooding）￼等技术，治疗恐惧症与焦虑症患者。这些行为疗法目前仍广为应用且效果显著。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://i.loli.net/2021/09/22/zSVFroOl1YEW9Is.jpg&quot;&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="http://liuhd.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="心理学实验" scheme="http://liuhd.com/tags/%E5%BF%83%E7%90%86%E5%AD%A6%E5%AE%9E%E9%AA%8C/"/>
    
    <category term="读书笔记" scheme="http://liuhd.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
